package com.manager.presentacion;

import con.manager.datos.TCliente;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author manager
 */
public class dlgCliente extends javax.swing.JDialog {

    /**
     * Creates new form dlgCliente
     *
     * @param parent
     */
    public dlgCliente(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        MyInitComponents();
    }

    /**
     * Inicializar componentes propios de la clase
     *
     */
    private void MyInitComponents() {

        final dlgCliente me = this;
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                Salir();
            }
        });
    }

    /**
     * Acciones para cerrar la aplicacion
     *
     */
    private void Salir() {
        this.setVisible(false);
        this.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtEdad = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 200), new java.awt.Dimension(0, 200), new java.awt.Dimension(0, 200));
        txtLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTable = new javax.swing.JTable();
        pnlComandos = new javax.swing.JPanel();
        btnInsertar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        Actualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cliente");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Código");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel1.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel2.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel2.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Edad");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel3.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel3.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        txtCodigo.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtCodigo.setMinimumSize(new java.awt.Dimension(150, 25));
        txtCodigo.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 74;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(txtCodigo, gridBagConstraints);

        txtNombre.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtNombre.setMinimumSize(new java.awt.Dimension(150, 25));
        txtNombre.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 74;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(txtNombre, gridBagConstraints);

        txtEdad.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtEdad.setMinimumSize(new java.awt.Dimension(150, 25));
        txtEdad.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 74;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(txtEdad, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        jPanel1.add(filler1, gridBagConstraints);

        txtLimpiar.setText("Limpiar");
        txtLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLimpiarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(txtLimpiar, gridBagConstraints);

        jPanel2.add(jPanel1);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 403));

        tblTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Edad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblTable);
        if (tblTable.getColumnModel().getColumnCount() > 0) {
            tblTable.getColumnModel().getColumn(0).setResizable(false);
            tblTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblTable.getColumnModel().getColumn(1).setResizable(false);
            tblTable.getColumnModel().getColumn(2).setResizable(false);
            tblTable.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        jPanel2.add(jScrollPane1);

        getContentPane().add(jPanel2);

        pnlComandos.setMaximumSize(new java.awt.Dimension(800, 35));
        pnlComandos.setMinimumSize(new java.awt.Dimension(800, 35));
        pnlComandos.setPreferredSize(new java.awt.Dimension(800, 35));
        pnlComandos.setLayout(new java.awt.GridBagLayout());

        btnInsertar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnInsertar.setText("Insertar");
        btnInsertar.setMaximumSize(new java.awt.Dimension(120, 35));
        btnInsertar.setMinimumSize(new java.awt.Dimension(120, 35));
        btnInsertar.setPreferredSize(new java.awt.Dimension(120, 35));
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        pnlComandos.add(btnInsertar, gridBagConstraints);

        btnBuscar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setMaximumSize(new java.awt.Dimension(120, 35));
        btnBuscar.setMinimumSize(new java.awt.Dimension(120, 35));
        btnBuscar.setPreferredSize(new java.awt.Dimension(120, 35));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        pnlComandos.add(btnBuscar, gridBagConstraints);

        Actualizar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        Actualizar.setText("Actualizar");
        Actualizar.setMaximumSize(new java.awt.Dimension(120, 35));
        Actualizar.setMinimumSize(new java.awt.Dimension(120, 35));
        Actualizar.setPreferredSize(new java.awt.Dimension(120, 35));
        Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        pnlComandos.add(Actualizar, gridBagConstraints);

        btnEliminar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setMaximumSize(new java.awt.Dimension(120, 35));
        btnEliminar.setMinimumSize(new java.awt.Dimension(120, 35));
        btnEliminar.setPreferredSize(new java.awt.Dimension(120, 35));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        pnlComandos.add(btnEliminar, gridBagConstraints);

        btnSalir.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setMaximumSize(new java.awt.Dimension(120, 35));
        btnSalir.setMinimumSize(new java.awt.Dimension(120, 35));
        btnSalir.setPreferredSize(new java.awt.Dimension(120, 35));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        pnlComandos.add(btnSalir, gridBagConstraints);

        getContentPane().add(pnlComandos);

        setSize(new java.awt.Dimension(810, 430));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed

        int codigo;
        String strId = txtCodigo.getText().trim().toUpperCase();

        try {
            codigo = Integer.parseInt(strId);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtCodigo.requestFocus();
            return;
        }

        if (codigo <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtCodigo.requestFocus();
            return;
        }

        String strNombre;
        strNombre = txtNombre.getText().trim().toUpperCase();

        if (strNombre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNombre.requestFocus();
            return;
        }

        int edad;
        String strEdad = txtEdad.getText().trim().toUpperCase();

        try {
            edad = Integer.parseInt(strEdad);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtEdad.requestFocus();
            return;
        }

        if ((edad < 18) || (edad > 99)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtEdad.requestFocus();
            return;
        }

        // Aqui se utiliza la lista dinamica
        TCliente.InsertarLista(new TCliente.TNodo(new TCliente(codigo, strNombre, edad)));
        LimpiarEntradas();
        VerDatos();
        Resumen();
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int codigo;
        String strId = txtCodigo.getText().trim().toUpperCase();

        try {
            codigo = Integer.parseInt(strId);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtCodigo.requestFocus();
            return;
        }

        if (codigo <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtCodigo.requestFocus();
            return;
        }

        TCliente.TNodo pFound = TCliente.Buscar(codigo);
        if (pFound != null) {
            VerNodoActual(TCliente.getNodoActual());
            VerDatos();
        } else {
            JOptionPane.showMessageDialog(this, "El codigo: no esta en la lista");
            LimpiarEntradas();
        }

        TCliente.TNodo aux = TCliente.Eliminar(codigo);
        if (aux != null) {
            VerNodoActual(TCliente.getNodoActual());
            VerDatos();
        } else {
            LimpiarEntradas();
        }

        if (TCliente.getHead() == null) {
            JOptionPane.showMessageDialog(this, "LA LISTA ESTA VACIA");
        }
        Resumen();

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        Salir();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        int codigo;
        String strId = txtCodigo.getText().trim().toUpperCase();

        try {
            codigo = Integer.parseInt(strId);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtCodigo.requestFocus();
            return;
        }

        if (codigo <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtCodigo.requestFocus();
            return;
        }

        TCliente.TNodo pFound = TCliente.Buscar(codigo);
        if (pFound != null) {
            VerNodoActual(TCliente.getNodoActual());
            VerDatos();
        } else {
            JOptionPane.showMessageDialog(this, "El codigo: no esta en la lista");
            LimpiarEntradas();
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Muestra en el panel de componentes, los valores del nodo
     *
     * @param nodo
     */
    private void VerNodoActual(TCliente.TNodo nodo) {
        if (nodo != null) {
            txtCodigo.setText(String.valueOf(nodo.getCliente().getCodigo()));
            txtNombre.setText(nodo.getCliente().getNombre());
            txtEdad.setText(String.valueOf(nodo.getCliente().getEdad()));
        } else {
            LimpiarEntradas();
        }
    }

    private void ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarActionPerformed

        int codigo;
        String strId = txtCodigo.getText().trim().toUpperCase();

        try {
            codigo = Integer.parseInt(strId);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtCodigo.requestFocus();
            return;
        }

        if (codigo <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtCodigo.requestFocus();
            return;
        }

        String strNombre;
        strNombre = txtNombre.getText().trim().toUpperCase();

        if (strNombre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNombre.requestFocus();
            return;
        }

        int edad;
        String strEdad = txtEdad.getText().trim().toUpperCase();

        try {
            edad = Integer.parseInt(strEdad);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtEdad.requestFocus();
            return;
        }

        if ((edad < 18) || (edad > 99)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtEdad.requestFocus();
            return;
        }

        // Aqui se utiliza la lista dinamica
        TCliente.Actualizar(codigo, strNombre, edad);
        LimpiarEntradas();
        VerDatos();
        Resumen();
    }//GEN-LAST:event_ActualizarActionPerformed

    private void txtLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLimpiarActionPerformed
        LimpiarEntradas();
    }//GEN-LAST:event_txtLimpiarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnSalir;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlComandos;
    private javax.swing.JTable tblTable;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JButton txtLimpiar;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void LimpiarEntradas() {
        txtCodigo.setText("");
        txtNombre.setText("");
        txtEdad.setText("");
    }

    private void VerDatos() {

        DefaultTableModel model = (DefaultTableModel) tblTable.getModel();
        model.setRowCount(0); // Borrar la tabla

        final TCliente.TNodo head = TCliente.getHead();

        if (head != null) {
            TCliente.TNodo p = head;
            while (p != null) {
                TCliente aux = p.getCliente();
                Object[] fila = {aux.getCodigo(), aux.getNombre(), aux.getEdad()};
                model.addRow(fila);
                p = p.getEnlaceSig();
            }
        }
    }

    /**
     * Por definir
     */
    private void Resumen() {

    }

}
