package com.manager.tda_arreglo_5_1;

import com.manager.tda_arreglo_5_1.TDA_Arreglo.NumComplejo;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author manager
 */
public class dlgAppMain extends javax.swing.JDialog {

    // Aqui se guarda la ventana contenedora, el Padre/Madre
    private final java.awt.Frame owner;

    // Aqui se matiene la referencia al objeto 
    private TDA_Arreglo myArreglo;

    DefaultTableModel model;

// **********************************************************************************************
    /**
     *
     */
    /**
     * Creates new form dlgAppMain
     *
     * @param parent
     */
    public dlgAppMain(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        this.owner = parent;
        myArreglo = null;
        MyInitComponents();
    }

    /**
     * Inicializar componentes propios de la clase
     *
     */
    private void MyInitComponents() {

        final javax.swing.JDialog me = this;
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                Salir();
            }
        });

        myArreglo = new TDA_Arreglo();
        myArreglo.fillRandom(33);

        model = (DefaultTableModel) (tblTable.getModel());

        // Centrar las Columnas
        DefaultTableCellRenderer centerRendererA = new DefaultTableCellRenderer();
        centerRendererA.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i < model.getColumnCount(); i++) {
            tblTable.getColumnModel().getColumn(i).setCellRenderer(centerRendererA);
        }

        limpiarEntradas();
        mostrarDatos();

        txtIdxDouble.requestFocus();
    }

    /**
     * Acciones para cerrar la aplicacion
     *
     */
    private void Salir() {
        this.setVisible(false);
        this.dispose();

        if (owner != null) {
            owner.setVisible(false);
            owner.dispose();
        }

        System.exit(0);
    }

    private void mostrarDatos() {
        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            txtTam.setText("");
            return;
        }

        // Limpiar la tabla
        model.setRowCount(0);

        NumComplejo[] auxVec;
        try {
            auxVec = myArreglo.getMyVector();
        } catch (CloneNotSupportedException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
            return;
        }

        if (auxVec == null) {
            return;
        }

        int i = 0;
        for (NumComplejo numC : auxVec) {
            if (numC != null) {
                Object[] fila = {i, numC, numC.getStrModulo(), numC.getStrGrados()};
                model.addRow(fila);
                i++;
            }
        }

        txtTam.setText(String.valueOf(myArreglo.getTam()));
        txtIdxDouble.requestFocus();
    }

    private void limpiarEntradas() {
        txtTam.setText("");
        txtIdxDouble.setText("");
        txtNumA.setText("");
        txtNumB.setText("");
        txtRes.setText("");

        txtIdxDouble.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTam = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtIdxDouble = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNumA = new javax.swing.JTextField();
        txtNumB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtRes = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnAleatorio = new javax.swing.JButton();
        btnAmasB = new javax.swing.JButton();
        btnAmenosB = new javax.swing.JButton();
        btnAxB = new javax.swing.JButton();
        btnAentreB = new javax.swing.JButton();
        btnMod_A = new javax.swing.JButton();
        btnGradosA = new javax.swing.JButton();
        btnAddA = new javax.swing.JButton();
        btnDxA = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Operaciones en Numeros Complejos");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        tblTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IDX", "Numero", "Modulo", "Grados"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTable);
        if (tblTable.getColumnModel().getColumnCount() > 0) {
            tblTable.getColumnModel().getColumn(0).setResizable(false);
            tblTable.getColumnModel().getColumn(1).setResizable(false);
            tblTable.getColumnModel().getColumn(2).setResizable(false);
            tblTable.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane1);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Tama√±o");
        jLabel1.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel1.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        txtTam.setEditable(false);
        txtTam.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtTam.setMinimumSize(new java.awt.Dimension(100, 30));
        txtTam.setPreferredSize(new java.awt.Dimension(120, 30));
        txtTam.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtTam, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("IDX / Double");
        jLabel2.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel2.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        txtIdxDouble.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtIdxDouble.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdxDouble.setMinimumSize(new java.awt.Dimension(100, 30));
        txtIdxDouble.setPreferredSize(new java.awt.Dimension(120, 30));
        txtIdxDouble.setRequestFocusEnabled(false);
        txtIdxDouble.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtIdxDoubleMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtIdxDouble, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Complejo A");
        jLabel3.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Complejo B");
        jLabel4.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel4.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        txtNumA.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtNumA.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNumA.setMinimumSize(new java.awt.Dimension(100, 30));
        txtNumA.setPreferredSize(new java.awt.Dimension(120, 30));
        txtNumA.setRequestFocusEnabled(false);
        txtNumA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumAFocusGained(evt);
            }
        });
        txtNumA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtNumAMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtNumA, gridBagConstraints);

        txtNumB.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtNumB.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNumB.setMinimumSize(new java.awt.Dimension(100, 30));
        txtNumB.setPreferredSize(new java.awt.Dimension(120, 30));
        txtNumB.setRequestFocusEnabled(false);
        txtNumB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumBFocusGained(evt);
            }
        });
        txtNumB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtNumBMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtNumB, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Resultado");
        jLabel5.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel5.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        txtRes.setEditable(false);
        txtRes.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtRes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRes.setMinimumSize(new java.awt.Dimension(100, 30));
        txtRes.setPreferredSize(new java.awt.Dimension(120, 30));
        txtRes.setRequestFocusEnabled(false);
        txtRes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtResMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtRes, gridBagConstraints);

        getContentPane().add(jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        btnAleatorio.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAleatorio.setText("Aleatorio");
        btnAleatorio.setToolTipText("Genera un nuevo vector de numeros complejos aleatorios, con la cantidad de elementos indicados en el campo campo IDX/Double");
        btnAleatorio.setMinimumSize(new java.awt.Dimension(160, 35));
        btnAleatorio.setPreferredSize(new java.awt.Dimension(160, 35));
        btnAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAleatorioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnAleatorio, gridBagConstraints);

        btnAmasB.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAmasB.setText("A + B");
        btnAmasB.setToolTipText("Suma dos numeros complejos\n");
        btnAmasB.setMinimumSize(new java.awt.Dimension(160, 35));
        btnAmasB.setPreferredSize(new java.awt.Dimension(160, 35));
        btnAmasB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmasBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnAmasB, gridBagConstraints);

        btnAmenosB.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAmenosB.setText("A - B");
        btnAmenosB.setToolTipText("Resta dos numeros complejos\n");
        btnAmenosB.setMinimumSize(new java.awt.Dimension(160, 35));
        btnAmenosB.setPreferredSize(new java.awt.Dimension(160, 35));
        btnAmenosB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmenosBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnAmenosB, gridBagConstraints);

        btnAxB.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAxB.setText("A x B");
        btnAxB.setToolTipText("Multiplica dos numeros complejos");
        btnAxB.setMinimumSize(new java.awt.Dimension(160, 35));
        btnAxB.setPreferredSize(new java.awt.Dimension(160, 35));
        btnAxB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAxBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnAxB, gridBagConstraints);

        btnAentreB.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAentreB.setText("A / B");
        btnAentreB.setToolTipText("Divide dos numeros complejos\n\n");
        btnAentreB.setMinimumSize(new java.awt.Dimension(160, 35));
        btnAentreB.setPreferredSize(new java.awt.Dimension(160, 35));
        btnAentreB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAentreBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnAentreB, gridBagConstraints);

        btnMod_A.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnMod_A.setText("Mod(A)");
        btnMod_A.setToolTipText("Calcula el Mod(A)\n\n");
        btnMod_A.setMinimumSize(new java.awt.Dimension(160, 35));
        btnMod_A.setPreferredSize(new java.awt.Dimension(160, 35));
        btnMod_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMod_AActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnMod_A, gridBagConstraints);

        btnGradosA.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnGradosA.setText("Grados(A)");
        btnGradosA.setToolTipText("Calcula los grados equivalentes del numero complejo A");
        btnGradosA.setMinimumSize(new java.awt.Dimension(160, 35));
        btnGradosA.setPreferredSize(new java.awt.Dimension(160, 35));
        btnGradosA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGradosAActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnGradosA, gridBagConstraints);

        btnAddA.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAddA.setText("Add(A)");
        btnAddA.setToolTipText("Agrega/Actualiza el indice IDX con el numero A");
        btnAddA.setMinimumSize(new java.awt.Dimension(160, 35));
        btnAddA.setPreferredSize(new java.awt.Dimension(160, 35));
        btnAddA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnAddA, gridBagConstraints);

        btnDxA.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnDxA.setText("Double  x A");
        btnDxA.setToolTipText("multiplica un Double por un numero complejo\n");
        btnDxA.setMinimumSize(new java.awt.Dimension(160, 35));
        btnDxA.setPreferredSize(new java.awt.Dimension(160, 35));
        btnDxA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDxAActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnDxA, gridBagConstraints);

        btnSalir.setBackground(new java.awt.Color(255, 102, 102));
        btnSalir.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setMinimumSize(new java.awt.Dimension(160, 35));
        btnSalir.setPreferredSize(new java.awt.Dimension(160, 35));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnSalir, gridBagConstraints);

        getContentPane().add(jPanel2);

        setSize(new java.awt.Dimension(1010, 530));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAxBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAxBActionPerformed

        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        double reA;
        double imA;
        String[] strNumA = txtNumA.getText().trim().split(",");

        if ((strNumA == null) || (strNumA.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        try {
            reA = Double.parseDouble(strNumA[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((reA < 0) || (reA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        try {
            imA = Double.parseDouble(strNumA[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((imA < 0) || (imA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        NumComplejo numA = new NumComplejo(reA, imA);

        double reB;
        double imB;
        String[] strNumB = txtNumB.getText().trim().split(",");

        if ((strNumB == null) || (strNumB.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        try {
            reB = Double.parseDouble(strNumB[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        if ((reB < 0) || (reB > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumB.requestFocus();
            return;
        }

        try {
            imB = Double.parseDouble(strNumB[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        if ((imB < 0) || (imB > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumB.requestFocus();
            return;
        }

        NumComplejo numB = new NumComplejo(reB, imB);

        txtRes.setText(numA.Multiplicar(numB).toString());
        txtIdxDouble.requestFocus();

    }//GEN-LAST:event_btnAxBActionPerformed

    private void btnAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAleatorioActionPerformed
        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        int newTam;
        String strNewTam = txtIdxDouble.getText().trim().toUpperCase();

        try {
            newTam = Integer.parseInt(strNewTam);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdxDouble.requestFocus();
            return;
        }

        if ((newTam <= 0) || (newTam > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtIdxDouble.requestFocus();
            return;
        }

        myArreglo.fillRandom(newTam);
        limpiarEntradas();
        mostrarDatos();
        txtIdxDouble.requestFocus();
    }//GEN-LAST:event_btnAleatorioActionPerformed

    private void btnGradosAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGradosAActionPerformed

        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        double reA;
        double imA;
        String[] strNumA = txtNumA.getText().trim().split(",");

        if ((strNumA == null) || (strNumA.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        try {
            reA = Double.parseDouble(strNumA[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((reA < 0) || (reA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        try {
            imA = Double.parseDouble(strNumA[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((imA < 0) || (imA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        NumComplejo numA = new NumComplejo(reA, imA);

        txtIdxDouble.setText("");
        txtNumB.setText("");

        txtRes.setText(numA.getStrGrados());
        txtIdxDouble.requestFocus();

    }//GEN-LAST:event_btnGradosAActionPerformed

    private void btnAddAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAActionPerformed

        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        int idx;
        String strIdx = txtIdxDouble.getText().trim();

        if ((strIdx == null) || (strIdx.length() <= 0)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdxDouble.requestFocus();
            return;
        }

        try {
            idx = Integer.parseInt(strIdx);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdxDouble.requestFocus();
            return;
        }

        if ((idx < 0) || (idx >= myArreglo.getTam())) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 <= IDX <= " + myArreglo.getTam());
            txtIdxDouble.requestFocus();
            return;
        }

        double reA;
        double imA;
        String[] strNumA = txtNumA.getText().trim().split(",");

        if ((strNumA == null) || (strNumA.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        try {
            reA = Double.parseDouble(strNumA[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((reA < 0) || (reA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100");
            txtNumA.requestFocus();
            return;
        }

        try {
            imA = Double.parseDouble(strNumA[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((imA < 0) || (imA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100");
            txtNumA.requestFocus();
            return;
        }

        NumComplejo numA = new NumComplejo(reA, imA);

        // Actualiza los valores en la tabla
        model.setValueAt(numA, idx, 1);
        model.setValueAt(numA.getStrModulo(), idx, 2);
        model.setValueAt(numA.getStrGrados(), idx, 3);

        txtTam.setText(String.valueOf(myArreglo.getTam()));
        txtIdxDouble.requestFocus();

        txtRes.setText(numA.Multiplicar(idx).toString());
        txtIdxDouble.requestFocus();

    }//GEN-LAST:event_btnAddAActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        Salir();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAmenosBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmenosBActionPerformed

        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        double reA;
        double imA;
        String[] strNumA = txtNumA.getText().trim().split(",");

        if ((strNumA == null) || (strNumA.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        try {
            reA = Double.parseDouble(strNumA[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((reA < 0) || (reA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        try {
            imA = Double.parseDouble(strNumA[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((imA < 0) || (imA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        NumComplejo numA = new NumComplejo(reA, imA);

        double reB;
        double imB;
        String[] strNumB = txtNumB.getText().trim().split(",");

        if ((strNumB == null) || (strNumB.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        try {
            reB = Double.parseDouble(strNumB[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        if ((reB < 0) || (reB > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumB.requestFocus();
            return;
        }

        try {
            imB = Double.parseDouble(strNumB[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        if ((imB < 0) || (imB > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumB.requestFocus();
            return;
        }

        NumComplejo numB = new NumComplejo(reB, imB);

        txtRes.setText(numA.Restar(numB).toString());
        txtIdxDouble.requestFocus();

    }//GEN-LAST:event_btnAmenosBActionPerformed

    private void btnAmasBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmasBActionPerformed

        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        double reA;
        double imA;
        String[] strNumA = txtNumA.getText().trim().split(",");

        if ((strNumA == null) || (strNumA.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        try {
            reA = Double.parseDouble(strNumA[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((reA < 0) || (reA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        try {
            imA = Double.parseDouble(strNumA[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((imA < 0) || (imA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        NumComplejo numA = new NumComplejo(reA, imA);

        double reB;
        double imB;
        String[] strNumB = txtNumB.getText().trim().split(",");

        if ((strNumB == null) || (strNumB.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        try {
            reB = Double.parseDouble(strNumB[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        if ((reB < 0) || (reB > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumB.requestFocus();
            return;
        }

        try {
            imB = Double.parseDouble(strNumB[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        if ((imB < 0) || (imB > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumB.requestFocus();
            return;
        }

        NumComplejo numB = new NumComplejo(reB, imB);

        txtRes.setText(numA.Sumar(numB).toString());
        txtIdxDouble.requestFocus();
    }//GEN-LAST:event_btnAmasBActionPerformed

    private void btnDxAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDxAActionPerformed

        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        double d;
        String strD = txtIdxDouble.getText().trim();

        if ((strD == null) || (strD.length() <= 0)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdxDouble.requestFocus();
            return;
        }

        try {
            d = Double.parseDouble(strD);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdxDouble.requestFocus();
            return;
        }

        if ((d < -100) || (d > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** -100 <= elemento <= 100)");
            txtIdxDouble.requestFocus();
            return;
        }

        double reA;
        double imA;
        String[] strNumA = txtNumA.getText().trim().split(",");

        if ((strNumA == null) || (strNumA.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        try {
            reA = Double.parseDouble(strNumA[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((reA < 0) || (reA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        try {
            imA = Double.parseDouble(strNumA[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((imA < 0) || (imA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        NumComplejo numA = new NumComplejo(reA, imA);

        txtRes.setText(numA.Multiplicar(d).toString());
        txtIdxDouble.requestFocus();

    }//GEN-LAST:event_btnDxAActionPerformed

    private void txtIdxDoubleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIdxDoubleMouseClicked
        txtIdxDouble.requestFocus();
    }//GEN-LAST:event_txtIdxDoubleMouseClicked

    private void txtNumAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNumAMouseClicked
        txtNumA.requestFocus();
    }//GEN-LAST:event_txtNumAMouseClicked

    private void txtNumBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtNumBMouseClicked
        txtNumB.requestFocus();
    }//GEN-LAST:event_txtNumBMouseClicked

    private void btnAentreBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAentreBActionPerformed

        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        double reA;
        double imA;
        String[] strNumA = txtNumA.getText().trim().split(",");

        if ((strNumA == null) || (strNumA.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        try {
            reA = Double.parseDouble(strNumA[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((reA < 0) || (reA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        try {
            imA = Double.parseDouble(strNumA[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((imA < 0) || (imA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        NumComplejo numA = new NumComplejo(reA, imA);

        double reB;
        double imB;
        String[] strNumB = txtNumB.getText().trim().split(",");

        if ((strNumB == null) || (strNumB.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        try {
            reB = Double.parseDouble(strNumB[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        if ((reB < 0) || (reB > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumB.requestFocus();
            return;
        }

        try {
            imB = Double.parseDouble(strNumB[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumB.requestFocus();
            return;
        }

        if ((imB < 0) || (imB > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumB.requestFocus();
            return;
        }

        NumComplejo numB = new NumComplejo(reB, imB);

        txtRes.setText(numA.Dividir(numB).toString());
        txtIdxDouble.requestFocus();

    }//GEN-LAST:event_btnAentreBActionPerformed

    private void btnMod_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMod_AActionPerformed

        if ((myArreglo == null) || (myArreglo.getTam() <= 0)) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el vector");
            txtIdxDouble.requestFocus();
            return;
        }

        double reA;
        double imA;
        String[] strNumA = txtNumA.getText().trim().split(",");

        if ((strNumA == null) || (strNumA.length != 2)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        try {
            reA = Double.parseDouble(strNumA[0].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((reA < 0) || (reA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        try {
            imA = Double.parseDouble(strNumA[1].trim());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtNumA.requestFocus();
            return;
        }

        if ((imA < 0) || (imA > 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < elemento <= 100)");
            txtNumA.requestFocus();
            return;
        }

        NumComplejo numA = new NumComplejo(reA, imA);

        txtIdxDouble.setText("");
        txtNumB.setText("");

        txtRes.setText(numA.getStrModulo());
        txtIdxDouble.requestFocus();

    }//GEN-LAST:event_btnMod_AActionPerformed

    private void txtResMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtResMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResMouseClicked

    private void txtNumAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumAFocusGained
        txtRes.setText("");
    }//GEN-LAST:event_txtNumAFocusGained

    private void txtNumBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumBFocusGained
        txtRes.setText("");
    }//GEN-LAST:event_txtNumBFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                (new dlgAppMain(new javax.swing.JFrame())).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddA;
    private javax.swing.JButton btnAentreB;
    private javax.swing.JButton btnAleatorio;
    private javax.swing.JButton btnAmasB;
    private javax.swing.JButton btnAmenosB;
    private javax.swing.JButton btnAxB;
    private javax.swing.JButton btnDxA;
    private javax.swing.JButton btnGradosA;
    private javax.swing.JButton btnMod_A;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTable;
    private javax.swing.JTextField txtIdxDouble;
    private javax.swing.JTextField txtNumA;
    private javax.swing.JTextField txtNumB;
    private javax.swing.JTextField txtRes;
    private javax.swing.JTextField txtTam;
    // End of variables declaration//GEN-END:variables

    private void mostrarDatosSig() {
//        if (myArreglo == null) {
//            txtTam.setText("");
//            return;
//        }
//
//        DefaultListModel model = new DefaultListModel();
//        lstList.setModel(model);
//
//        String[] aux = myArreglo.getStrDatosSig();
//
//        if (aux != null) {
//            for (int i = 0; i < aux.length; i++) {
//                model.addElement(aux[i]);
//            }
//        }
//
//        txtTam.setText(String.valueOf(myArreglo.tamano()));
//        txtDouble.requestFocus();
    }

    private void mostrarDatosAnt() {
//        if (myArreglo == null) {
//            txtTam.setText("");
//            return;
//        }
//
//        DefaultListModel model = new DefaultListModel();
//        lstList.setModel(model);
//
//        String[] aux = myArreglo.getStrDatosAnt();
//
//        if (aux != null) {
//            for (int i = 0; i < aux.length; i++) {
//                model.addElement(aux[i]);
//            }
//        }
//
//        txtTam.setText(String.valueOf(myArreglo.tamano()));
//        txtDouble.requestFocus();
    }
}
