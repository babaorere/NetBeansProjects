/*
 * Todos los derechos reservados por CAPIP Sistemas C.A., Venezuela
 * RIF J-407111787
 * capipsistemas@gmail.com, baba.orere@gmail.com
 * @2016, 2017, 2018
 */
package com.principal.configuracion;

import com.principal.capipsistema.Globales;
import com.principal.capipsistema.Propiedades;
import com.principal.capipsistema.UserPassIn;
import com.principal.capipsistema.UserTrack;
import com.principal.connection.ConnCapip;
import com.principal.modelos.UTModel;
import com.principal.textfield_decimal.DecimalTextField;
import com.principal.utils.DateCellRenderer;
import com.principal.utils.DecimalCellRenderer;
import com.principal.utils.Format;
import com.principal.utils.IntegerCellRenderer;
import com.principal.utils.MasterDetailState;
import com.principal.utils.PnlImagenFondo;
import java.awt.Toolkit;
import static java.lang.Integer.min;
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * @author Capip Sistemas C.A.
 */
public class DlgUnidadTributariaAplic extends javax.swing.JDialog {

    private static final int COL_DESC = 0;

    private static final int COL_FECHA = 1;

    private static final int COL_VALOR = 2;

    private static final int COL_REG = 3;

    private MasterDetailState preState;

    private MasterDetailState state;

    /**
     * Creates new form
     *
     * @param parent
     */
    public DlgUnidadTributariaAplic(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        setOwnBehavior();
        setCompBehavior();
        setStartConditions();
    }

    /**
     * Rev 04/10/2016
     */
    private void setOwnBehavior() {
        try {
            UserTrack.trackUser(getClass().getName(), "INIT", getTitle());
        } catch (final Exception inex) {
            JOptionPane.showMessageDialog(null, inex);
            logger.error(inex);
        }
        setTitle(Propiedades.CAPIP_SISTEMAS + " - " + getTitle() + " - " + Propiedades.CAPIP_CLIENTE_RAZONSOCIAL);
        // Establecer la acción al cerrar ventana
        addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                actReturn();
            }
        });
        // Para salir con la tecla ESC
        getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW).put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0), "Cancel");
        getRootPane().getActionMap().put("Cancel", new javax.swing.AbstractAction() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                actReturn();
            }
        });
    }

    /**
     * Rev 04/10/2016
     */
    private void setCompBehavior() {
        // Para actualizar automaticamente los campos de detalles, al seleccionar una fila de la tabla
        // al estilo master/detail
        tblMaster.getSelectionModel().addListSelectionListener((ListSelectionEvent inlse) -> {
            if (inlse.getValueIsAdjusting()) {
                return;
            }
            if (tblMaster.getSelectedRow() >= 0) {
                stateEditOld();
            }
        });
        tblMaster.getColumnModel().getColumn(COL_FECHA).setCellRenderer(new DateCellRenderer());
        tblMaster.setDefaultRenderer(Integer.class, new IntegerCellRenderer());
        tblMaster.setDefaultRenderer(Long.class, new IntegerCellRenderer());
        tblMaster.setDefaultRenderer(Double.class, new DecimalCellRenderer());
    }

    /**
     * Rev 04/10/2016
     */
    private void setStartConditions() {
        preState = MasterDetailState.None;
        state = MasterDetailState.None;
        stateNormal();
    }

    /**
     * Para Reubicar la ventana al ser visualizada
     * Rev 25/09/2016
     *
     * @param inb
     */
    @Override
    public void setVisible(boolean inb) {
        // Para mostrar la ventana en el tope de la pantalla
        if (inb) {
            setLocation((Toolkit.getDefaultToolkit().getScreenSize().width - getWidth()) / 2, 10);
        }
        super.setVisible(inb);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        pnlImagenFondo = new PnlImagenFondo();
        pnlComponentes = new javax.swing.JPanel();
        txtDesc = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFechaVigencia = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtValorBs = DecimalTextField.getTextField();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMaster = new javax.swing.JTable();
        pnlComandos = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        btnReturn = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Unidad Tributaria aplicada");
        pnlImagenFondo.setLayout(new javax.swing.BoxLayout(pnlImagenFondo, javax.swing.BoxLayout.PAGE_AXIS));
        pnlComponentes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        pnlComponentes.setMaximumSize(new java.awt.Dimension(1000, 150));
        pnlComponentes.setMinimumSize(new java.awt.Dimension(1000, 150));
        pnlComponentes.setOpaque(false);
        pnlComponentes.setPreferredSize(new java.awt.Dimension(1000, 150));
        pnlComponentes.setLayout(new java.awt.GridBagLayout());
        // NOI18N
        txtDesc.setFont(new java.awt.Font("Arial", 3, 12));
        txtDesc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtDesc.setDisabledTextColor(new java.awt.Color(102, 0, 0));
        txtDesc.setEnabled(false);
        txtDesc.setMaximumSize(new java.awt.Dimension(500, 30));
        txtDesc.setMinimumSize(new java.awt.Dimension(500, 30));
        txtDesc.setPreferredSize(new java.awt.Dimension(500, 30));
        txtDesc.setSelectionColor(new java.awt.Color(175, 204, 125));
        txtDesc.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(txtDesc, gridBagConstraints);
        // NOI18N
        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 12));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Fecha de Vigencia ");
        jLabel4.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel4.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel4.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(jLabel4, gridBagConstraints);
        // NOI18N
        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 12));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Valor en Bs. ");
        jLabel7.setAlignmentX(0.5F);
        jLabel7.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel7.setMinimumSize(new java.awt.Dimension(200, 30));
        // NOI18N
        jLabel7.setName("");
        jLabel7.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(jLabel7, gridBagConstraints);
        // NOI18N
        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 12));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Decreto / G.O. / Descripción");
        jLabel2.setMaximumSize(new java.awt.Dimension(200, 30));
        jLabel2.setMinimumSize(new java.awt.Dimension(200, 30));
        jLabel2.setPreferredSize(new java.awt.Dimension(200, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(jLabel2, gridBagConstraints);
        // NOI18N
        txtFechaVigencia.setFont(new java.awt.Font("Arial", 3, 12));
        txtFechaVigencia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtFechaVigencia.setDisabledTextColor(new java.awt.Color(102, 0, 0));
        txtFechaVigencia.setEnabled(false);
        txtFechaVigencia.setMaximumSize(new java.awt.Dimension(150, 30));
        txtFechaVigencia.setMinimumSize(new java.awt.Dimension(150, 30));
        txtFechaVigencia.setPreferredSize(new java.awt.Dimension(150, 30));
        txtFechaVigencia.setSelectionColor(new java.awt.Color(175, 204, 125));
        txtFechaVigencia.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFechaVigenciaKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(txtFechaVigencia, gridBagConstraints);
        btnSave.setBackground(java.awt.SystemColor.inactiveCaption);
        // NOI18N
        btnSave.setFont(new java.awt.Font("Arial", 2, 18));
        btnSave.setText("Guardar");
        btnSave.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnSave.setEnabled(false);
        btnSave.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
                btnSaveFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                btnSaveFocusLost(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 45;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(btnSave, gridBagConstraints);
        btnNew.setBackground(java.awt.SystemColor.inactiveCaption);
        // NOI18N
        btnNew.setFont(new java.awt.Font("Arial", 2, 18));
        btnNew.setText("Nuevo");
        btnNew.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnNew.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
                btnNewFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                btnNewFocusLost(evt);
            }
        });
        btnNew.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 61;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(btnNew, gridBagConstraints);
        btnCancel.setBackground(java.awt.SystemColor.inactiveCaption);
        // NOI18N
        btnCancel.setFont(new java.awt.Font("Arial", 2, 18));
        btnCancel.setText("Cancelar");
        btnCancel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnCancel.setEnabled(false);
        btnCancel.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
                btnCancelFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                btnCancelFocusLost(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(btnCancel, gridBagConstraints);
        txtValorBs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtValorBs.setEnabled(false);
        // NOI18N
        txtValorBs.setFont(new java.awt.Font("Arial", 3, 12));
        txtValorBs.setMaximumSize(new java.awt.Dimension(150, 30));
        txtValorBs.setMinimumSize(new java.awt.Dimension(150, 30));
        txtValorBs.setPreferredSize(new java.awt.Dimension(150, 30));
        txtValorBs.setSelectionColor(new java.awt.Color(175, 204, 125));
        txtValorBs.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorBsActionPerformed(evt);
            }
        });
        txtValorBs.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValorBsKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(txtValorBs, gridBagConstraints);
        btnEliminar.setBackground(java.awt.SystemColor.inactiveCaption);
        // NOI18N
        btnEliminar.setFont(new java.awt.Font("Arial", 2, 18));
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnEliminar.setEnabled(false);
        btnEliminar.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
                btnEliminarFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                btnEliminarFocusLost(evt);
            }
        });
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlComponentes.add(btnEliminar, gridBagConstraints);
        pnlImagenFondo.add(pnlComponentes);
        // NOI18N
        tblMaster.setFont(new java.awt.Font("Arial", 3, 15));
        tblMaster.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { "Decreto / Descripción", "Fecha Vigencia", "Valor Bs.", "Reg" }) {

            Class[] types = new Class[] { java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class };

            boolean[] canEdit = new boolean[] { false, false, false, false };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tblMaster.setSelectionBackground(new java.awt.Color(175, 204, 125));
        jScrollPane1.setViewportView(tblMaster);
        if (tblMaster.getColumnModel().getColumnCount() > 0) {
            tblMaster.getColumnModel().getColumn(1).setMinWidth(75);
            tblMaster.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblMaster.getColumnModel().getColumn(1).setMaxWidth(150);
            tblMaster.getColumnModel().getColumn(2).setMinWidth(75);
            tblMaster.getColumnModel().getColumn(2).setPreferredWidth(150);
            tblMaster.getColumnModel().getColumn(2).setMaxWidth(150);
            tblMaster.getColumnModel().getColumn(3).setMinWidth(0);
            tblMaster.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblMaster.getColumnModel().getColumn(3).setMaxWidth(0);
        }
        pnlImagenFondo.add(jScrollPane1);
        pnlComandos.setMaximumSize(new java.awt.Dimension(1000, 60));
        pnlComandos.setMinimumSize(new java.awt.Dimension(1000, 60));
        pnlComandos.setOpaque(false);
        pnlComandos.setPreferredSize(new java.awt.Dimension(1000, 60));
        pnlComandos.setLayout(new javax.swing.BoxLayout(pnlComandos, javax.swing.BoxLayout.LINE_AXIS));
        pnlComandos.add(filler1);
        btnReturn.setBackground(java.awt.SystemColor.inactiveCaption);
        // NOI18N
        btnReturn.setFont(new java.awt.Font("Arial", 2, 18));
        btnReturn.setText("RETORNAR");
        btnReturn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnReturn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReturn.setMaximumSize(new java.awt.Dimension(170, 40));
        btnReturn.setMinimumSize(new java.awt.Dimension(170, 40));
        btnReturn.setPreferredSize(new java.awt.Dimension(170, 40));
        btnReturn.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });
        pnlComandos.add(btnReturn);
        pnlComandos.add(filler2);
        pnlImagenFondo.add(pnlComandos);
        getContentPane().add(pnlImagenFondo, java.awt.BorderLayout.CENTER);
        pack();
    }

    // </editor-fold>//GEN-END:initComponents
    private void txtDescKeyTyped(java.awt.event.KeyEvent evt) {
//GEN-FIRST:event_txtDescKeyTyped
        if (txtDesc.getText().length() >= 128) {
            evt.consume();
        }
    }

//GEN-LAST:event_txtDescKeyTyped
    private void txtFechaVigenciaKeyTyped(java.awt.event.KeyEvent evt) {
//GEN-FIRST:event_txtFechaVigenciaKeyTyped
        if (txtFechaVigencia.getText().length() >= 10) {
            evt.consume();
        }
    }

//GEN-LAST:event_txtFechaVigenciaKeyTyped
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {
//GEN-FIRST:event_btnSaveActionPerformed
        switch (state) {
            case EditNew:
                if (actSaveNew()) {
                    stateNormal();
                }
                break;
            case EditOld:
                actSaveOld();
                break;
        }
    }

//GEN-LAST:event_btnSaveActionPerformed
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {
//GEN-FIRST:event_btnNewActionPerformed
        switch (state) {
            case Normal:
            case EditOld:
                stateEditNew();
                break;
        }
    }

//GEN-LAST:event_btnNewActionPerformed
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {
//GEN-FIRST:event_btnCancelActionPerformed
        switch (state) {
            case EditNew:
                stateNormal();
                break;
            case EditOld:
                actCancelSaveOld();
                break;
        }
    }

//GEN-LAST:event_btnCancelActionPerformed
    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {
//GEN-FIRST:event_btnReturnActionPerformed
        switch (state) {
            case Normal:
            case EditOld:
                actReturn();
                break;
        }
    }

//GEN-LAST:event_btnReturnActionPerformed
    private void txtValorBsKeyTyped(java.awt.event.KeyEvent evt) {
//GEN-FIRST:event_txtValorBsKeyTyped
        if (txtValorBs.getText().length() >= 20) {
            evt.consume();
        }
    }

//GEN-LAST:event_txtValorBsKeyTyped
    private void txtValorBsActionPerformed(java.awt.event.ActionEvent evt) {
//GEN-FIRST:event_txtValorBsActionPerformed
        java.awt.EventQueue.invokeLater(btnSave::requestFocusInWindow);
    }

//GEN-LAST:event_txtValorBsActionPerformed
    private void btnSaveFocusGained(java.awt.event.FocusEvent evt) {
//GEN-FIRST:event_btnSaveFocusGained
        getRootPane().setDefaultButton(btnSave);
    }

//GEN-LAST:event_btnSaveFocusGained
    private void btnSaveFocusLost(java.awt.event.FocusEvent evt) {
//GEN-FIRST:event_btnSaveFocusLost
        getRootPane().setDefaultButton(null);
    }

//GEN-LAST:event_btnSaveFocusLost
    private void btnNewFocusGained(java.awt.event.FocusEvent evt) {
//GEN-FIRST:event_btnNewFocusGained
        getRootPane().setDefaultButton(btnNew);
    }

//GEN-LAST:event_btnNewFocusGained
    private void btnNewFocusLost(java.awt.event.FocusEvent evt) {
//GEN-FIRST:event_btnNewFocusLost
        getRootPane().setDefaultButton(null);
    }

//GEN-LAST:event_btnNewFocusLost
    private void btnCancelFocusGained(java.awt.event.FocusEvent evt) {
//GEN-FIRST:event_btnCancelFocusGained
        getRootPane().setDefaultButton(btnCancel);
    }

//GEN-LAST:event_btnCancelFocusGained
    private void btnCancelFocusLost(java.awt.event.FocusEvent evt) {
//GEN-FIRST:event_btnCancelFocusLost
        getRootPane().setDefaultButton(null);
    }

//GEN-LAST:event_btnCancelFocusLost
    private void btnEliminarFocusGained(java.awt.event.FocusEvent evt) {
//GEN-FIRST:event_btnEliminarFocusGained
        getRootPane().setDefaultButton(btnEliminar);
    }

//GEN-LAST:event_btnEliminarFocusGained
    private void btnEliminarFocusLost(java.awt.event.FocusEvent evt) {
//GEN-FIRST:event_btnEliminarFocusLost
        getRootPane().setDefaultButton(null);
    }

//GEN-LAST:event_btnEliminarFocusLost
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {
//GEN-FIRST:event_btnEliminarActionPerformed
    }

//GEN-LAST:event_btnEliminarActionPerformed
    /**
     * Rev 04/10/2016
     */
    private void stateNormal() {
        preState = state;
        state = MasterDetailState.Normal;
        // Condiciones iniciales
        initNormal();
        // Acciones
        actUpdateTbl();
        tblMaster.clearSelection();
        java.awt.EventQueue.invokeLater(tblMaster::requestFocusInWindow);
    }

    /**
     * Rev 04/10/2016
     */
    private void initNormal() {
        if (preState == state) {
            return;
        }
        actClearComp();
        txtDesc.setEnabled(false);
        txtFechaVigencia.setEnabled(false);
        txtValorBs.setEnabled(false);
        btnNew.setEnabled(true);
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
        btnReturn.setEnabled(true);
        tblMaster.setEnabled(true);
    }

    /**
     * Rev 04/10/2016
     */
    private void stateEditNew() {
        preState = state;
        state = MasterDetailState.EditNew;
        // Condiciones iniciales
        initEditNew();
        // Acciones
        tblMaster.clearSelection();
        java.awt.EventQueue.invokeLater(txtDesc::requestFocusInWindow);
    }

    /**
     * Rev 04/10/2016
     */
    private void initEditNew() {
        if (preState == state) {
            return;
        }
        actClearComp();
        txtDesc.setEnabled(true);
        txtFechaVigencia.setEnabled(true);
        txtValorBs.setEnabled(true);
        btnNew.setEnabled(false);
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true);
        btnReturn.setEnabled(false);
        tblMaster.setEnabled(false);
    }

    /**
     * Rev 04/10/2016
     */
    private void stateEditOld() {
        preState = state;
        state = MasterDetailState.EditOld;
        // Condiciones iniciales
        initEditOld();
        // Acciones
        final int selRow = tblMaster.getSelectedRow();
        if (selRow >= 0) {
            txtDesc.setText(tblMaster.getValueAt(selRow, COL_DESC).toString());
            txtDesc.setCaretPosition(0);
            txtFechaVigencia.setText(Format.toStr((java.sql.Date) tblMaster.getValueAt(selRow, COL_FECHA)));
            txtValorBs.setValue(BigDecimal.valueOf((Double) tblMaster.getValueAt(selRow, COL_VALOR)));
        } else {
            actClearComp();
        }
    }

    /**
     * Rev 04/10/2016
     */
    private void initEditOld() {
        if (preState == state) {
            return;
        }
        final boolean enabled = tblMaster.getSelectedRow() >= 0;
        txtDesc.setEnabled(enabled);
        txtFechaVigencia.setEnabled(enabled);
        txtValorBs.setEnabled(enabled);
        btnNew.setEnabled(true);
        btnSave.setEnabled(enabled);
        btnCancel.setEnabled(enabled);
        btnReturn.setEnabled(true);
        tblMaster.setEnabled(true);
    }

    /**
     * Rev 04/10/2016
     */
    private boolean actSaveNew() {
        final Map<String, Object> param = new HashMap<>(101);
        if (actValidSaveNew(param)) {
            return actSaveNew(param);
        }
        return false;
    }

    /**
     * Rev 04/10/2016
     */
    private boolean actSaveOld() {
        final Map<String, Object> param = new HashMap<>(101);
        if (actValidSaveOld(param)) {
            return actSaveOld(param);
        }
        return false;
    }

    /**
     * Rev 04/10/2016
     */
    private void actCancelSaveOld() {
        // Acciones
        final int selRow = tblMaster.getSelectedRow();
        if (selRow >= 0) {
            txtDesc.setText(tblMaster.getValueAt(selRow, COL_DESC).toString());
            txtDesc.setCaretPosition(0);
            txtFechaVigencia.setText(Format.toStr((java.sql.Date) tblMaster.getValueAt(selRow, COL_FECHA)));
            txtValorBs.setValue(BigDecimal.valueOf((Double) tblMaster.getValueAt(selRow, COL_VALOR)));
        } else {
            actClearComp();
        }
    }

    /**
     * Rev 04/10/2016
     */
    private void actReturn() {
        setVisible(false);
        dispose();
    }

    /**
     * Rev 04/10/2016
     */
    private void actClearComp() {
        txtDesc.setText("");
        txtFechaVigencia.setText(Format.toStr(Globales.getServerTimeStamp()));
        txtValorBs.setValue(BigDecimal.ZERO);
    }

    /**
     * Rev 04/10/2016
     */
    private void actUpdateTbl() {
        tblMaster.clearSelection();
        final DefaultTableModel model = (DefaultTableModel) tblMaster.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        final Object[] datos = new Object[4];
        try {
            final ResultSet rs = ConnCapip.getInstance().executeQuery("SELECT * FROM unidad_tributaria_aplic ORDER BY fecha_vigencia DESC");
            while (rs.next()) {
                UTModel reg = new UTModel(rs);
                datos[COL_DESC] = reg.getDescripcion();
                datos[COL_FECHA] = reg.getFecha_vigencia();
                datos[COL_VALOR] = Format.toDouble(reg.getValor_bs());
                datos[COL_REG] = reg;
                model.addRow(datos);
            }
        } catch (final Exception inex) {
            JOptionPane.showMessageDialog(null, inex);
            logger.error(inex);
        }
    }

    /**
     * Valida cada campo, y actualiza cada parametro.
     * Retorna verdadero solo si todos los campos son validos
     *
     * Rev 03/10/2016
     */
    private boolean actValidSaveNew(final Map<String, Object> inparam) {
        // Verificar la validez de los campos
        if (actValid(inparam)) {
            // A manera de validación, verificar que es un Error que la fecha vigencia de la
            // nueva U.T. sea menor que la fecha de vigencia de la ultima U.T. registrada
            try {
                final ResultSet rs = ConnCapip.getInstance().executeQuery("SELECT * FROM unidad_tributaria_aplic ORDER BY fecha_vigencia DESC");
                if (rs.next()) {
                    java.sql.Date fechaUltIVA = Format.toDateSql(rs.getDate("fecha_vigencia"));
                    if (((java.sql.Date) inparam.get("fecha_vigencia")).compareTo(fechaUltIVA) <= 0) {
                        throw new Exception("Fecha de Vigencia inválida");
                    }
                }
            } catch (final Exception inex) {
                JOptionPane.showMessageDialog(this, "Error. No es posible validar la Fecha de Vigencia" + System.getProperty("line.separator") + inex);
                java.awt.EventQueue.invokeLater(txtFechaVigencia::requestFocusInWindow);
                logger.error(inex);
                return false;
            }
            return true;
        }
        return false;
    }

    /**
     * Valida cada campo, y actualiza cada parametro.
     * Retorna verdadero solo si todos los campos son validos
     *
     * Rev 03/10/2016
     */
    private boolean actValidSaveOld(final Map<String, Object> inparam) {
        final int rowSel = tblMaster.getSelectedRow();
        if (rowSel < 0) {
            return false;
        }
        inparam.put("id_unidad_tributaria_aplic", ((UTModel) tblMaster.getValueAt(rowSel, COL_REG)).getId_unidad_tributaria_aplic());
        return actValid(inparam);
    }

    /**
     * Valida cada campo, y actualiza cada parametro.
     * Retorna verdadero solo si todos los campos son validos
     *
     * Rev 03/10/2016
     */
    private boolean actValid(final Map<String, Object> inparam) {
        String sAux = txtDesc.getText().trim().toUpperCase();
        if (sAux.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Decreto / G.O. / Descripción inválida");
            java.awt.EventQueue.invokeLater(txtDesc::requestFocusInWindow);
            return false;
        }
        // Se toma la cantidad de caracteres necesaria, hasta el tamaño maximo del campo
        final String desc = sAux.substring(0, min(sAux.length(), 128));
        final java.sql.Date fecha_vigencia;
        try {
            fecha_vigencia = Format.toDateSql(txtFechaVigencia.getText().trim());
        } catch (final Exception inex) {
            JOptionPane.showMessageDialog(this, "Fecha de Vigencia inválida");
            java.awt.EventQueue.invokeLater(txtFechaVigencia::requestFocusInWindow);
            logger.error(inex);
            return false;
        }
        final BigDecimal valor_bs;
        try {
            txtValorBs.commitEdit();
            valor_bs = (BigDecimal) txtValorBs.getValue();
        } catch (final Exception inex) {
            JOptionPane.showMessageDialog(this, "Valor en Bs. inválido");
            java.awt.EventQueue.invokeLater(txtValorBs::requestFocusInWindow);
            logger.error(inex);
            return false;
        }
        if (valor_bs.doubleValue() < 0.00d) {
            JOptionPane.showMessageDialog(this, "Valor en Bs. inválido");
            java.awt.EventQueue.invokeLater(txtValorBs::requestFocusInWindow);
            return false;
        }
        inparam.put("desc", desc);
        inparam.put("fecha_vigencia", fecha_vigencia);
        inparam.put("valor_bs", valor_bs);
        return true;
    }

    /**
     * Rev 04/10/2016
     */
    private boolean actSaveNew(final Map<String, Object> inparam) {
        try {
            final PreparedStatement pst = ConnCapip.getInstance().getConnection().prepareStatement("INSERT INTO unidad_tributaria_aplic" + "(id_user, id_session, date_session, descripcion, fecha_vigencia, valor_bs) " + "VALUES (?, ?, ?, ?, ?, ?)");
            pst.setLong(1, UserPassIn.getIdUser());
            pst.setLong(2, UserPassIn.getIdSession());
            pst.setTimestamp(3, UserPassIn.getDateSession());
            pst.setString(4, (String) inparam.get("desc"));
            pst.setDate(5, (java.sql.Date) inparam.get("fecha_vigencia"));
            pst.setBigDecimal(6, (BigDecimal) inparam.get("valor_bs"));
            if (pst.executeUpdate() != 1) {
                throw new Exception("Error. Al guardar el Registro");
            }
        } catch (final Exception inex) {
            JOptionPane.showMessageDialog(null, inex);
            logger.error(inex);
            return false;
        }
        return true;
    }

    /**
     * Rev 04/10/2016
     */
    private boolean actSaveOld(final Map<String, Object> inparam) {
        try {
            final PreparedStatement pst = ConnCapip.getInstance().getConnection().prepareStatement("UPDATE unidad_tributaria_aplic " + "set id_user= ?, id_session= ?, date_session= ?, descripcion= ?, fecha_vigencia= ?, valor_bs= ? " + "WHERE id_unidad_tributaria_aplic= ?");
            pst.setLong(1, UserPassIn.getIdUser());
            pst.setLong(2, UserPassIn.getIdSession());
            pst.setTimestamp(3, UserPassIn.getDateSession());
            pst.setString(4, (String) inparam.get("desc"));
            pst.setDate(5, (java.sql.Date) inparam.get("fecha_vigencia"));
            pst.setBigDecimal(6, (BigDecimal) inparam.get("valor_bs"));
            pst.setLong(7, (long) inparam.get("id_unidad_tributaria_aplic"));
            if (pst.executeUpdate() != 1) {
                throw new Exception("Error. Al actualizar el Registro");
            }
            UTModel reg = UTModel.getxID((long) inparam.get("id_unidad_tributaria_aplic"));
            if (reg == null) {
                throw new Exception("Error. Al actualizar el Registro");
            }
            final int selRow = tblMaster.getSelectedRow();
            tblMaster.setValueAt(reg.getDescripcion(), selRow, COL_DESC);
            tblMaster.setValueAt(reg.getFecha_vigencia(), selRow, COL_FECHA);
            tblMaster.setValueAt(Format.toDouble((BigDecimal) reg.getValor_bs()), selRow, COL_VALOR);
            tblMaster.setValueAt(reg, selRow, COL_REG);
        } catch (final Exception inex) {
            JOptionPane.showMessageDialog(null, inex);
            logger.error(inex);
            return false;
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                DlgUnidadTributariaAplic dialog = new DlgUnidadTributariaAplic(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;

    private javax.swing.JButton btnEliminar;

    private javax.swing.JButton btnNew;

    private javax.swing.JButton btnReturn;

    private javax.swing.JButton btnSave;

    private javax.swing.Box.Filler filler1;

    private javax.swing.Box.Filler filler2;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JScrollPane jScrollPane1;

    private javax.swing.JPanel pnlComandos;

    private javax.swing.JPanel pnlComponentes;

    private javax.swing.JPanel pnlImagenFondo;

    private javax.swing.JTable tblMaster;

    private javax.swing.JTextField txtDesc;

    private javax.swing.JTextField txtFechaVigencia;

    private javax.swing.JFormattedTextField txtValorBs;

    // End of variables declaration//GEN-END:variables
    private static final Logger logger = LogManager.getLogger(DlgUnidadTributariaAplic.class);
}
