package vista;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.UsuarioDao;
import modelo.UsuarioModelo;

public final class UsuarioView extends javax.swing.JFrame {

    UsuarioModelo oldUsuario;

    /**
     * Creates new form vista_usuario
     */
    public UsuarioView() {
        initComponents();
        myInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtTipoSangre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtEdad = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTabla = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CRUD de Usuario");
        setBackground(new java.awt.Color(204, 153, 255));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setPreferredSize(new java.awt.Dimension(761, 150));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("NOMBRE");
        jLabel5.setMaximumSize(new java.awt.Dimension(120, 25));
        jLabel5.setMinimumSize(new java.awt.Dimension(120, 25));
        jLabel5.setPreferredSize(new java.awt.Dimension(120, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        txtNombre.setCaretColor(new java.awt.Color(153, 255, 255));
        txtNombre.setCaretPosition(0);
        txtNombre.setMaximumSize(new java.awt.Dimension(300, 25));
        txtNombre.setMinimumSize(new java.awt.Dimension(300, 25));
        txtNombre.setPreferredSize(new java.awt.Dimension(300, 25));
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(txtNombre, gridBagConstraints);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("APELLIDO");
        jLabel6.setMaximumSize(new java.awt.Dimension(120, 25));
        jLabel6.setMinimumSize(new java.awt.Dimension(120, 25));
        jLabel6.setPreferredSize(new java.awt.Dimension(120, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(jLabel6, gridBagConstraints);

        txtApellido.setMaximumSize(new java.awt.Dimension(300, 25));
        txtApellido.setMinimumSize(new java.awt.Dimension(300, 25));
        txtApellido.setPreferredSize(new java.awt.Dimension(300, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(txtApellido, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("EDAD");
        jLabel7.setMaximumSize(new java.awt.Dimension(120, 25));
        jLabel7.setMinimumSize(new java.awt.Dimension(120, 25));
        jLabel7.setPreferredSize(new java.awt.Dimension(120, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(jLabel7, gridBagConstraints);

        txtTipoSangre.setMaximumSize(new java.awt.Dimension(50, 25));
        txtTipoSangre.setMinimumSize(new java.awt.Dimension(50, 25));
        txtTipoSangre.setPreferredSize(new java.awt.Dimension(50, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(txtTipoSangre, gridBagConstraints);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("TIPO DE SANGRE");
        jLabel1.setMaximumSize(new java.awt.Dimension(120, 25));
        jLabel1.setMinimumSize(new java.awt.Dimension(120, 25));
        jLabel1.setPreferredSize(new java.awt.Dimension(120, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        txtEdad.setMaximumSize(new java.awt.Dimension(50, 25));
        txtEdad.setMinimumSize(new java.awt.Dimension(50, 25));
        txtEdad.setPreferredSize(new java.awt.Dimension(50, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(txtEdad, gridBagConstraints);

        btnGuardar.setText("Guardar");
        btnGuardar.setMaximumSize(new java.awt.Dimension(100, 25));
        btnGuardar.setMinimumSize(new java.awt.Dimension(100, 25));
        btnGuardar.setPreferredSize(new java.awt.Dimension(100, 25));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 0);
        jPanel2.add(btnGuardar, gridBagConstraints);

        btnEliminar.setText("Eliminar");
        btnEliminar.setMaximumSize(new java.awt.Dimension(100, 25));
        btnEliminar.setMinimumSize(new java.awt.Dimension(100, 25));
        btnEliminar.setPreferredSize(new java.awt.Dimension(100, 25));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanel2.add(btnEliminar, gridBagConstraints);

        btnConsultar.setText("Consultar");
        btnConsultar.setToolTipText("Debe indicar un Nombre y Apellido validos");
        btnConsultar.setMaximumSize(new java.awt.Dimension(100, 25));
        btnConsultar.setMinimumSize(new java.awt.Dimension(100, 25));
        btnConsultar.setPreferredSize(new java.awt.Dimension(100, 25));
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanel2.add(btnConsultar, gridBagConstraints);

        btnActualizar.setText("Actualizar");
        btnActualizar.setMaximumSize(new java.awt.Dimension(100, 25));
        btnActualizar.setMinimumSize(new java.awt.Dimension(100, 25));
        btnActualizar.setPreferredSize(new java.awt.Dimension(100, 25));
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 0);
        jPanel2.add(btnActualizar, gridBagConstraints);

        btnOk.setText("Ok");
        btnOk.setMaximumSize(new java.awt.Dimension(100, 25));
        btnOk.setMinimumSize(new java.awt.Dimension(100, 25));
        btnOk.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 50, 0, 0);
        jPanel2.add(btnOk, gridBagConstraints);

        getContentPane().add(jPanel2);

        tblTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Edad", "Tipo de Sangre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblTabla);

        getContentPane().add(jScrollPane2);

        setSize(new java.awt.Dimension(810, 630));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        String nombre = txtNombre.getText().trim().toUpperCase();
        if (nombre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, nombre invalido");
            return;
        }
        nombre = nombre.replaceAll(",", ""); // elimina las comas

        String apellido = txtApellido.getText().trim().toUpperCase();
        if (apellido.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, apellido invalido");
            return;
        }
        apellido = apellido.replaceAll(",", ""); // elimina las comas

        String edad = txtEdad.getText().trim().toUpperCase();
        if (edad.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, edad invalido");
            return;
        }

        try {
            int aux = Integer.parseInt(edad);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error, edad invalida");
            return;
        }

        String tipoSangre = txtTipoSangre.getText().trim().toUpperCase();
        if (tipoSangre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, tipo sangre invalido");
            return;
        }

        if (!tipoSangre.equals("A") && !tipoSangre.equals("B") && !tipoSangre.equals("AB") && !tipoSangre.equals("O")) {
            JOptionPane.showMessageDialog(this, "Error, tipo sangre invalido");
            return;
        }

        UsuarioModelo usuario = new UsuarioModelo(nombre, apellido, edad, tipoSangre);

        if (UsuarioDao.create(usuario)) {
            JOptionPane.showMessageDialog(this, "Usuario creado con exito");
            limpiarTxt();
        } else {
            JOptionPane.showMessageDialog(this, "Error al tratar de crear el usuario");
        }

        llenarTabla();

        oldUsuario = null;
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed

        String nombre = txtNombre.getText().trim().toUpperCase();
        if (nombre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, nombre invalido");
            return;
        }

        String apellido = txtApellido.getText().trim().toUpperCase();
        if (apellido.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, apellido invalido");
            return;
        }

        txtEdad.setText("");
        txtTipoSangre.setText("");

        oldUsuario = UsuarioDao.read(nombre, apellido);
        if (oldUsuario != null) {
            txtNombre.setText(oldUsuario.getNombre());
            txtApellido.setText(oldUsuario.getApellido());
            txtEdad.setText(oldUsuario.getEdad());
            txtTipoSangre.setText(oldUsuario.getTipodeSangre());
        } else {
            JOptionPane.showMessageDialog(this, "Usuario no encontrado");
        }

        llenarTabla();

    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        String nombre = txtNombre.getText().trim().toUpperCase();
        if (nombre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, nombre invalido");
            return;
        }
        nombre = nombre.replaceAll(",", ""); // elimina las comas

        String apellido = txtApellido.getText().trim().toUpperCase();
        if (apellido.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, apellido invalido");
            return;
        }
        apellido = apellido.replaceAll(",", ""); // elimina las comas

        txtEdad.setText("");
        txtTipoSangre.setText("");

        UsuarioModelo auxU = new UsuarioModelo(nombre, apellido, null, null);

        if (UsuarioDao.delete(auxU)) {
            JOptionPane.showMessageDialog(this, "Usuario eliminado con exito");

            txtNombre.setText("");
            txtApellido.setText("");
            txtEdad.setText("");
            txtTipoSangre.setText("");

        } else {
            JOptionPane.showMessageDialog(this, "Usuario no encontrado");
        }

        oldUsuario = null;
        llenarTabla();

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        String nombre = txtNombre.getText().trim().toUpperCase();
        if (nombre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, nombre invalido");
            return;
        }

        String apellido = txtApellido.getText().trim().toUpperCase();
        if (apellido.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, apellido invalido");
            return;
        }

        String edad = txtEdad.getText().trim().toUpperCase();
        if (edad.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, edad invalido");
            return;
        }

        try {
            int aux = Integer.parseInt(edad);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error, edad invalida");
            return;
        }

        String tipoSangre = txtTipoSangre.getText().trim().toUpperCase();
        if (tipoSangre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, tipo sangre invalido");
            return;
        }

        if (!tipoSangre.equals("A") && !tipoSangre.equals("B") && !tipoSangre.equals("AB") && !tipoSangre.equals("O")) {
            JOptionPane.showMessageDialog(this, "Error, tipo sangre invalido");
            return;
        }

        UsuarioModelo newUsuario = new UsuarioModelo(nombre, apellido, edad, tipoSangre);

        if (UsuarioDao.update(oldUsuario, newUsuario)) {
            JOptionPane.showMessageDialog(this, "Usuario actualizado con exito");
            limpiarTxt();
            oldUsuario = null;
        } else {
            JOptionPane.showMessageDialog(this, "Error al tratar de actualizar el usuario");
        }

        llenarTabla();

    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsuarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsuarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsuarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsuarioView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsuarioView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblTabla;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTipoSangre;
    // End of variables declaration//GEN-END:variables

    private void myInitComponents() {

        // Creación del listener, qie sera ejecutado una vez que se quiera cerrar la ventana
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {

                java.awt.EventQueue.invokeLater(() -> {
                    dispose();
                });
            }
        });

        limpiarTxt();

        txtNombre.setEnabled(true);
        txtApellido.setEnabled(true);
        txtEdad.setEnabled(true);
        txtTipoSangre.setEnabled(true);

        btnGuardar.setEnabled(true);
        btnConsultar.setEnabled(true);
        btnActualizar.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnOk.setEnabled(true);

        llenarTabla();
    }

    private void limpiarTxt() {
        txtNombre.setText("");
        txtApellido.setText("");
        txtEdad.setText("");
        txtTipoSangre.setText("");
    }

    private void llenarTabla() {

        List<UsuarioModelo> list;

        try {
            list = UsuarioDao.findAll();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error al tratar de recuperar la lista de Usuarios\n" + ex);
            return;
        }

        // Eliminar los elementos anteriores
        while (tblTabla.getRowCount() > 0) {
            ((DefaultTableModel) tblTabla.getModel()).removeRow(0);
        }

        Object[] row = new Object[4];
        int iRow = 0;
        for (UsuarioModelo usuario : list) {
            row[0] = usuario.getNombre();
            row[1] = usuario.getApellido();
            row[2] = usuario.getEdad();
            row[3] = usuario.getTipodeSangre();

            ((DefaultTableModel) tblTabla.getModel()).insertRow(iRow, row);
            iRow++;
        }

    }

}
