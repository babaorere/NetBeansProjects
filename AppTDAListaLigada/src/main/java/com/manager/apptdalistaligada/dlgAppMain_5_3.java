package com.manager.apptdalistaligada;

import static java.lang.Math.min;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author manager
 */
public class dlgAppMain_5_3 extends javax.swing.JDialog {

    // Aqui se guarda la ventana contenedora, el Padre/Madre
    private final java.awt.Frame owner;

    // Aqui se matiene la referencia al objeto 
    private TDA_Hash_List_DLink myList;

    DefaultTableModel model;

// **********************************************************************************************
    /**
     *
     */
    /**
     * Creates new form dlgAppMain
     *
     * @param parent
     */
    public dlgAppMain_5_3(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        this.owner = parent;
        myList = null;
        MyInitComponents();
    }

    /**
     * Inicializar componentes propios de la clase
     *
     */
    private void MyInitComponents() {

        final javax.swing.JDialog me = this;
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                Salir();
            }
        });

        myList = new TDA_Hash_List_DLink();

        DefaultTableModel model;

        limpiarEntradas();
        mostrarDatos();

        txtUser.requestFocus();
    }

    /**
     * Acciones para cerrar la aplicacion
     *
     */
    private void Salir() {
        this.setVisible(false);
        this.dispose();

        if (owner != null) {
            owner.setVisible(false);
            owner.dispose();
        }

        System.exit(0);
    }

    private void mostrarDatos() {
        if ((myList == null) || (myList.tamano() <= 0)) {
            txtTam.setText("");
            txtMensaje.setText("Lista Nula o Vacia");
            return;
        }

        model = (DefaultTableModel) (tblTable.getModel());

        // Limpiar la tabla
        model.setRowCount(0);

        // Son diez columnas
        ArrayList<String>[] columna = new ArrayList[10];

        int max = 0;
        for (int icol = 0; icol < 10; icol++) {

            columna[icol] = myList.getStrDatosSig(icol);

            if ((columna[icol] != null) && (columna[icol].size() > max)) {
                max = columna[icol].size();
            }
        }

        for (int fil = 0; fil < max; fil++) {
            Object[] tmp = new Object[10];

            for (int col = 0; col < 10; col++) {
                if ((columna[col] != null) && (fil < columna[col].size())) {
                    tmp[col] = columna[col].get(fil);
                } else {
                    tmp[col] = "";
                }
            }

            model.addRow(tmp);
        }

        txtTam.setText(String.valueOf(myList.tamano()));
        txtMensaje.setText("");

        txtUser.requestFocus();
    }

    private void limpiarEntradas() {
        txtTam.setText("");
        txtIdx.setText("");
        txtUser.setText("");
        txtPassW.setText("");
        txtMensaje.setText("");

        txtIdx.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnDelIni = new javax.swing.JButton();
        btnInsertarIni = new javax.swing.JButton();
        btnInsertarFin = new javax.swing.JButton();
        btnAleatorio = new javax.swing.JButton();
        btnRecorrerSig = new javax.swing.JButton();
        btnRecorrerAnt = new javax.swing.JButton();
        btnBusqSec = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnDelFin = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTam = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtIdx = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPassW = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtMensaje = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Hash y Listas Enlazada Doble");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setMaximumSize(new java.awt.Dimension(200, 2147483647));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        btnDelIni.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnDelIni.setText("Del. Inicio");
        btnDelIni.setToolTipText("Elimina un Item al inicio de la columna seleccionada en IDX");
        btnDelIni.setMinimumSize(new java.awt.Dimension(160, 35));
        btnDelIni.setPreferredSize(new java.awt.Dimension(160, 35));
        btnDelIni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelIniActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnDelIni, gridBagConstraints);

        btnInsertarIni.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnInsertarIni.setText("Ins. Inic.");
        btnInsertarIni.setToolTipText("Inserta un Item, al inicio de la lista, segun su HashCode\n");
        btnInsertarIni.setMinimumSize(new java.awt.Dimension(160, 35));
        btnInsertarIni.setPreferredSize(new java.awt.Dimension(160, 35));
        btnInsertarIni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarIniActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnInsertarIni, gridBagConstraints);

        btnInsertarFin.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnInsertarFin.setText("Ins. Final");
        btnInsertarFin.setToolTipText("Inserta un Item, al final de la lista, segun su HashCode");
        btnInsertarFin.setMinimumSize(new java.awt.Dimension(160, 35));
        btnInsertarFin.setPreferredSize(new java.awt.Dimension(160, 35));
        btnInsertarFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarFinActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnInsertarFin, gridBagConstraints);

        btnAleatorio.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAleatorio.setText("Aleatorio");
        btnAleatorio.setToolTipText("Toma del campo Tam/IDX, la cantidad de elementos aleatorios tendra la Hash lista enlazada, y la genera");
        btnAleatorio.setMinimumSize(new java.awt.Dimension(160, 35));
        btnAleatorio.setPreferredSize(new java.awt.Dimension(160, 35));
        btnAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAleatorioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnAleatorio, gridBagConstraints);

        btnRecorrerSig.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnRecorrerSig.setText("Recorrer SIg.");
        btnRecorrerSig.setToolTipText("Selecciona la columna IDX, y muestra la lista recorrida hacia \"adelante\"");
        btnRecorrerSig.setMinimumSize(new java.awt.Dimension(160, 35));
        btnRecorrerSig.setPreferredSize(new java.awt.Dimension(160, 35));
        btnRecorrerSig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecorrerSigActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnRecorrerSig, gridBagConstraints);

        btnRecorrerAnt.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnRecorrerAnt.setText("Recorrer Ant.");
        btnRecorrerAnt.setToolTipText("Selecciona la columna IDX, y muestra la lista recorrida hacia \"adelante\"");
        btnRecorrerAnt.setMinimumSize(new java.awt.Dimension(160, 35));
        btnRecorrerAnt.setPreferredSize(new java.awt.Dimension(160, 35));
        btnRecorrerAnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecorrerAntActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnRecorrerAnt, gridBagConstraints);

        btnBusqSec.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnBusqSec.setText("Buscar");
        btnBusqSec.setToolTipText("Realiza un busqueda secuencial, hacia \"adelante\" sobre la lista ");
        btnBusqSec.setMinimumSize(new java.awt.Dimension(160, 35));
        btnBusqSec.setPreferredSize(new java.awt.Dimension(160, 35));
        btnBusqSec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBusqSecActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnBusqSec, gridBagConstraints);

        btnSalir.setBackground(new java.awt.Color(255, 102, 102));
        btnSalir.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setMinimumSize(new java.awt.Dimension(160, 35));
        btnSalir.setPreferredSize(new java.awt.Dimension(160, 35));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnSalir, gridBagConstraints);

        btnDelFin.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnDelFin.setText("Del. Final");
        btnDelFin.setToolTipText("Elimina un Item al final de la columna seleccionada en IDX\n");
        btnDelFin.setMinimumSize(new java.awt.Dimension(160, 35));
        btnDelFin.setPreferredSize(new java.awt.Dimension(160, 35));
        btnDelFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelFinActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnDelFin, gridBagConstraints);

        btnDel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnDel.setText("Del. Item");
        btnDel.setToolTipText("elimina el Item buscado en cualquier parte de la Hash lista\n");
        btnDel.setMinimumSize(new java.awt.Dimension(160, 35));
        btnDel.setPreferredSize(new java.awt.Dimension(160, 35));
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(btnDel, gridBagConstraints);

        jPanel3.add(jPanel2);

        jPanel1.setMaximumSize(new java.awt.Dimension(200, 2147483647));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 150));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 400));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tamaño");
        jLabel1.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel1.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        txtTam.setEditable(false);
        txtTam.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtTam.setMinimumSize(new java.awt.Dimension(100, 30));
        txtTam.setPreferredSize(new java.awt.Dimension(120, 30));
        txtTam.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtTam, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Tam / IDX");
        jLabel5.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel5.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        txtIdx.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtIdx.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdx.setMinimumSize(new java.awt.Dimension(100, 30));
        txtIdx.setPreferredSize(new java.awt.Dimension(120, 30));
        txtIdx.setRequestFocusEnabled(false);
        txtIdx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtIdxMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtIdx, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Usuario");
        jLabel3.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        txtUser.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtUser.setMinimumSize(new java.awt.Dimension(100, 30));
        txtUser.setPreferredSize(new java.awt.Dimension(120, 30));
        txtUser.setRequestFocusEnabled(false);
        txtUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtUserMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtUser, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Password");
        jLabel4.setMinimumSize(new java.awt.Dimension(80, 30));
        jLabel4.setPreferredSize(new java.awt.Dimension(120, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        txtPassW.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtPassW.setMinimumSize(new java.awt.Dimension(100, 30));
        txtPassW.setPreferredSize(new java.awt.Dimension(120, 30));
        txtPassW.setRequestFocusEnabled(false);
        txtPassW.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPassWMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(txtPassW, gridBagConstraints);

        jPanel3.add(jPanel1);

        tblTable.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        tblTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hash 0", "Hash 1", "Hash 2", "Hash 3", "Hash 4", "Hash 5", "Hash 6", "Hash 7", "Hash 8", "Hash 9"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTable);
        if (tblTable.getColumnModel().getColumnCount() > 0) {
            tblTable.getColumnModel().getColumn(0).setResizable(false);
            tblTable.getColumnModel().getColumn(1).setResizable(false);
            tblTable.getColumnModel().getColumn(2).setResizable(false);
            tblTable.getColumnModel().getColumn(3).setResizable(false);
            tblTable.getColumnModel().getColumn(4).setResizable(false);
            tblTable.getColumnModel().getColumn(5).setResizable(false);
            tblTable.getColumnModel().getColumn(6).setResizable(false);
            tblTable.getColumnModel().getColumn(7).setResizable(false);
        }

        jPanel3.add(jScrollPane1);

        getContentPane().add(jPanel3);

        jScrollPane3.setMinimumSize(new java.awt.Dimension(700, 22));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(700, 73));

        txtMensaje.setColumns(20);
        txtMensaje.setRows(5);
        txtMensaje.setMinimumSize(new java.awt.Dimension(700, 14));
        txtMensaje.setPreferredSize(new java.awt.Dimension(700, 70));
        jScrollPane3.setViewportView(txtMensaje);

        getContentPane().add(jScrollPane3);

        setSize(new java.awt.Dimension(1210, 630));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDelIniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelIniActionPerformed

        // Lista no ha sido creada
        if (myList == null) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el Array");
            txtIdx.requestFocus();
            return;
        }

        // Lista Vacia
        if (myList.tamano() <= 0) {
            JOptionPane.showMessageDialog(null, "Lista Vacia");
            txtIdx.requestFocus();
            return;
        }

        int idx;
        String strIdx = txtIdx.getText().trim().toUpperCase();

        try {
            idx = Integer.parseInt(strIdx);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdx.requestFocus();
            return;
        }

        if ((idx < 0) || (idx > 10)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 <= IDX < 10)");
            txtIdx.requestFocus();
            return;
        }

        myList.eliminarInicio(idx);
        limpiarEntradas();
        mostrarDatos();

        txtIdx.requestFocus();
    }//GEN-LAST:event_btnDelIniActionPerformed

    private void btnAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAleatorioActionPerformed

        int cant;
        String strCant = txtIdx.getText().trim().toUpperCase();

        try {
            cant = Integer.parseInt(strCant);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdx.requestFocus();
            return;
        }

        if ((cant <= 0) || (cant >= 100)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 < IDX < 100)");
            txtIdx.requestFocus();
            return;
        }

        myList.fillRandom(cant);

        limpiarEntradas();
        mostrarDatos();
        txtIdx.requestFocus();
    }//GEN-LAST:event_btnAleatorioActionPerformed

    private void btnRecorrerSigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecorrerSigActionPerformed

        // Lista no ha sido creada
        if (myList == null) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el Array");
            txtIdx.requestFocus();
            return;
        }

        // Lista Vacia
        if (myList.tamano() <= 0) {
            JOptionPane.showMessageDialog(null, "Lista Vacia");
            txtIdx.requestFocus();
            return;
        }

        int idx;
        String strIdx = txtIdx.getText().trim().toUpperCase();

        try {
            idx = Integer.parseInt(strIdx);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdx.requestFocus();
            return;
        }

        if ((idx < 0) || (idx > 10)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 <= IDX < 10)");
            txtIdx.requestFocus();
            return;
        }

        limpiarEntradas();
        mostrarDatos();
        txtIdx.requestFocus();

    }//GEN-LAST:event_btnRecorrerSigActionPerformed

    private void btnRecorrerAntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecorrerAntActionPerformed

        // Lista no ha sido creada
        if (myList == null) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el Array");
            txtIdx.requestFocus();
            return;
        }

        // Lista Vacia
        if (myList.tamano() <= 0) {
            JOptionPane.showMessageDialog(null, "Lista Vacia");
            txtIdx.requestFocus();
            return;
        }

        int idx;
        String strIdx = txtIdx.getText().trim().toUpperCase();

        try {
            idx = Integer.parseInt(strIdx);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdx.requestFocus();
            return;
        }

        if ((idx < 0) || (idx > 10)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 <= IDX < 10)");
            txtIdx.requestFocus();
            return;
        }

        limpiarEntradas();
        mostrarDatosAnt(idx);
        txtIdx.requestFocus();

    }//GEN-LAST:event_btnRecorrerAntActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        Salir();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnInsertarFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarFinActionPerformed

        if (myList == null) {
            JOptionPane.showMessageDialog(null, "Debe crear primero la Lista");
            txtIdx.requestFocus();
            return;
        }

        txtIdx.setText("");
        txtMensaje.setText("");

        String strUser = txtUser.getText().trim().toUpperCase();

        if (strUser.length() <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtUser.requestFocus();
            return;
        }

        // limitar la longitud del nombre usuario a Max 10        
        strUser = strUser.substring(0, min(strUser.length(), 10));

        String strPassW = txtPassW.getText().trim().toUpperCase();

        if (strPassW.length() != 4) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***, debe ser 4 caracteres alfanumericos");
            txtPassW.requestFocus();
            return;
        }

        strPassW = strPassW.substring(0, min(strPassW.length(), 4));

        myList.insertarFinal(new TItem(strUser, strPassW));
        limpiarEntradas();
        mostrarDatos();
        txtIdx.requestFocus();

    }//GEN-LAST:event_btnInsertarFinActionPerformed

    private void btnInsertarIniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarIniActionPerformed
        if (myList == null) {
            JOptionPane.showMessageDialog(null, "Debe crear primero la Lista");
            txtIdx.requestFocus();
            return;
        }

        txtIdx.setText("");
        txtMensaje.setText("");

        String strUser = txtUser.getText().trim().toUpperCase();

        if (strUser.length() <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtUser.requestFocus();
            return;
        }

        // limitar la longitud del nombre usuario a Max 10        
        strUser = strUser.substring(0, min(strUser.length(), 10));

        String strPassW = txtPassW.getText().trim().toUpperCase();

        if (strPassW.length() != 4) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***, debe ser 4 caracteres alfanumericos");
            txtPassW.requestFocus();
            return;
        }

        strPassW = strPassW.substring(0, min(strPassW.length(), 4));

        myList.insertarInicio(new TItem(strUser, strPassW));
        limpiarEntradas();
        mostrarDatos();
        txtIdx.requestFocus();
    }//GEN-LAST:event_btnInsertarIniActionPerformed

    private void btnBusqSecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBusqSecActionPerformed

        if (myList == null) {
            JOptionPane.showMessageDialog(null, "Debe crear primero la Lista");
            txtIdx.requestFocus();
            return;
        }

        txtIdx.setText("");
        txtMensaje.setText("");

        String strUser = txtUser.getText().trim().toUpperCase();

        if (strUser.length() <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtUser.requestFocus();
            return;
        }

        // limitar la longitud del nombre usuario a Max 10        
        strUser = strUser.substring(0, min(strUser.length(), 10));

        String strPassW = txtPassW.getText().trim().toUpperCase();

        if (strPassW.length() != 4) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***, debe ser 4 caracteres alfanumericos");
            txtPassW.requestFocus();
            return;
        }

        strPassW = strPassW.substring(0, min(strPassW.length(), 4));

        if (myList.buscar(new TItem(strUser, strPassW))) {
            JOptionPane.showMessageDialog(this, "Elemento SI encontrado, ELIMINADO");
        } else {
            JOptionPane.showMessageDialog(this, "Elemento NO encontrado");
        }

        limpiarEntradas();
        mostrarDatos();

        txtUser.requestFocus();

    }//GEN-LAST:event_btnBusqSecActionPerformed

    private void txtUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtUserMouseClicked
        txtUser.requestFocus();
    }//GEN-LAST:event_txtUserMouseClicked

    private void txtPassWMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPassWMouseClicked
        txtPassW.requestFocus();
    }//GEN-LAST:event_txtPassWMouseClicked

    private void btnDelFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelFinActionPerformed
        // Lista no ha sido creada
        if (myList == null) {
            JOptionPane.showMessageDialog(null, "Debe crear primero el Array");
            txtIdx.requestFocus();
            return;
        }

        // Lista Vacia
        if (myList.tamano() <= 0) {
            JOptionPane.showMessageDialog(null, "Lista Vacia");
            txtIdx.requestFocus();
            return;
        }

        int idx;
        String strIdx = txtIdx.getText().trim().toUpperCase();

        try {
            idx = Integer.parseInt(strIdx);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtIdx.requestFocus();
            return;
        }

        if ((idx < 0) || (idx > 10)) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO *** 0 <= IDX < 10)");
            txtIdx.requestFocus();
            return;
        }

        myList.eliminarFinal(idx);
        limpiarEntradas();
        mostrarDatos();

        txtIdx.requestFocus();

    }//GEN-LAST:event_btnDelFinActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed

        if (myList == null) {
            JOptionPane.showMessageDialog(null, "Debe crear primero la Lista");
            txtIdx.requestFocus();
            return;
        }

        txtIdx.setText("");
        txtMensaje.setText("");

        String strUser = txtUser.getText().trim().toUpperCase();

        if (strUser.length() <= 0) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***");
            txtUser.requestFocus();
            return;
        }

        // limitar la longitud del nombre usuario a Max 10        
        strUser = strUser.substring(0, min(strUser.length(), 10));

        String strPassW = txtPassW.getText().trim().toUpperCase();

        if (strPassW.length() != 4) {
            JOptionPane.showMessageDialog(this, "*** VALOR INVALIDO ***, debe ser 4 caracteres alfanumericos");
            txtPassW.requestFocus();
            return;
        }

        strPassW = strPassW.substring(0, min(strPassW.length(), 4));

        if (myList.eliminar(new TItem(strUser, strPassW))) {
            JOptionPane.showMessageDialog(this, "Elemento SI encontrado, ELIMINADO");
        } else {
            JOptionPane.showMessageDialog(this, "Elemento NO encontrado");
        }

        limpiarEntradas();
        mostrarDatos();

        txtUser.requestFocus();

    }//GEN-LAST:event_btnDelActionPerformed

    private void txtIdxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIdxMouseClicked
        txtIdx.requestFocus();
    }//GEN-LAST:event_txtIdxMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                (new dlgAppMain_5_3(new javax.swing.JFrame())).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAleatorio;
    private javax.swing.JButton btnBusqSec;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDelFin;
    private javax.swing.JButton btnDelIni;
    private javax.swing.JButton btnInsertarFin;
    private javax.swing.JButton btnInsertarIni;
    private javax.swing.JButton btnRecorrerAnt;
    private javax.swing.JButton btnRecorrerSig;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblTable;
    private javax.swing.JTextField txtIdx;
    private javax.swing.JTextArea txtMensaje;
    private javax.swing.JTextField txtPassW;
    private javax.swing.JTextField txtTam;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void mostrarDatosSig(int idx) {
        if ((myList == null) || (myList.tamano() <= 0)) {
            txtTam.setText("");
            txtMensaje.setText("Lista Nula o Vacia");
            return;
        }

        model = (DefaultTableModel) (tblTable.getModel());

        // Limpiar la tabla
        model.setRowCount(0);

        ArrayList<String>[] columna = new ArrayList[10];

        int max = 0;
        for (int icol = 0; icol < 10; icol++) {

            columna[icol] = myList.getStrDatosSig(icol);

            if ((columna[icol] != null) && (columna[icol].size() > max)) {
                max = columna[icol].size();
            }
        }

        for (int fil = 0; fil < max; fil++) {
            Object[] tmp = new Object[10];

            for (int col = 0; col < 10; col++) {
                if ((columna[col] != null) && (fil < columna[col].size())) {
                    tmp[col] = columna[col].get(fil);
                } else {
                    tmp[col] = "";
                }
            }

            model.addRow(tmp);
        }

        txtTam.setText(String.valueOf(myList.tamano()));
        txtMensaje.setText("");
        txtIdx.requestFocus();
    }

    private void mostrarDatosAnt(int idx) {
        if ((myList == null) || (myList.tamano() <= 0)) {
            txtTam.setText("");
            txtMensaje.setText("Lista Nula o Vacia");
            return;
        }

        model = (DefaultTableModel) (tblTable.getModel());

        // Limpiar la tabla
        model.setRowCount(0);

        ArrayList<String>[] columna = new ArrayList[10];

        int max = 0;
        for (int icol = 0; icol < 10; icol++) {

            if (icol != idx) {
                columna[icol] = myList.getStrDatosSig(icol);
            } else {
                columna[icol] = myList.getStrDatosAnt(icol);
            }

            if ((columna[icol] != null) && (columna[icol].size() > max)) {
                max = columna[icol].size();
            }
        }

        for (int fil = 0; fil < max; fil++) {
            Object[] tmp = new Object[10];

            for (int col = 0; col < 10; col++) {
                if ((columna[col] != null) && (fil < columna[col].size())) {
                    tmp[col] = columna[col].get(fil);
                } else {
                    tmp[col] = "";
                }
            }

            model.addRow(tmp);
        }

        txtTam.setText(String.valueOf(myList.tamano()));
        txtMensaje.setText("");

        txtUser.requestFocus();
    }
}
