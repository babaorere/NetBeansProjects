package com.app.athleticraceinterface;

import java.awt.Window;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 */
public final class WinApp extends javax.swing.JFrame {

    private Runner arrCorr[];
    private int contCorr;

    private final class Runner {

        // Clase estatica para generar los numeros aleatorios
        private Random rand = new Random();

        private String nombre;
        private int speed;

        public Runner() {
            this(null);
        }

        public Runner(String nombre) {
            rand = new Random();
            this.nombre = nombre;
            this.speed = rand.nextInt(31); // genera un numero entre 0 y 30
        }

        /**
         * @return the nombre
         */
        public String getNombre() {
            return nombre;
        }

        /**
         * @param nombre the nombre to set
         */
        public void setNombre(String nombre) {
            this.nombre = nombre;
        }

        /**
         * @return the speed
         */
        public int getSpeed() {
            return speed;
        }

        /**
         * @param speed the speed to set
         */
        public void setSpeed(int speed) {
            this.speed = speed;
        }

    }

    // va contando la posicion de llegada
    private static int contPos;

    private class ThreadRunner extends Thread {

        private final Runner corr;
        private final javax.swing.JTextArea textArea;

        public ThreadRunner(Runner corr, JTextArea textArea) {
            contPos = 0;
            this.corr = corr;
            this.textArea = textArea;
        }

        @Override
        public void run() {
            super.run();

            int tiempo = corr.getSpeed() * 1000;
            try {
                sleep(tiempo);
            } catch (InterruptedException ex) {
                Logger.getLogger(WinApp.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Fue necesario hacer un "invokeLater" para sinconizar con la cola de eventos  
            java.awt.EventQueue.invokeLater(() -> {
                contPos++;
                textArea.setText(textArea.getText() + "\n" + contPos + " - " + corr.getNombre() + " - Tiempo: " + tiempo + " segundos");
            });
        }

    }

    /**
     * Creates new form WinApp
     */
    public WinApp() {
        initComponents();
        myInitComponents();
    }

    public void myInitComponents() {

        arrCorr = new Runner[5];

        Limpiar();

        final java.awt.Window me = this;

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {

                java.awt.EventQueue.invokeLater(() -> {
                    actionSalir(me);
                });
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlRegistro = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        pnlCorrRegistrados = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCorrRegistrados = new javax.swing.JTextArea();
        pnlResultados = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCorrResultados = new javax.swing.JTextArea();
        pnlCMD = new javax.swing.JPanel();
        btnTerminar = new javax.swing.JButton();
        btnReiniciar = new javax.swing.JButton();
        btnIniciar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Carrera Atl√©tica");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        pnlRegistro.setBackground(new java.awt.Color(153, 255, 255));
        pnlRegistro.setMinimumSize(new java.awt.Dimension(699, 100));
        pnlRegistro.setPreferredSize(new java.awt.Dimension(600, 100));
        pnlRegistro.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Registrar Corredor");
        jLabel2.setPreferredSize(new java.awt.Dimension(157, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlRegistro.add(jLabel2, gridBagConstraints);

        txtNombre.setBackground(new java.awt.Color(204, 255, 204));
        txtNombre.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));
        txtNombre.setMinimumSize(new java.awt.Dimension(150, 35));
        txtNombre.setPreferredSize(new java.awt.Dimension(150, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 270;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        pnlRegistro.add(txtNombre, gridBagConstraints);

        btnRegistrar.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.setMaximumSize(new java.awt.Dimension(120, 35));
        btnRegistrar.setMinimumSize(new java.awt.Dimension(120, 35));
        btnRegistrar.setPreferredSize(new java.awt.Dimension(120, 35));
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlRegistro.add(btnRegistrar, gridBagConstraints);

        getContentPane().add(pnlRegistro);

        pnlCorrRegistrados.setBackground(new java.awt.Color(153, 255, 255));
        pnlCorrRegistrados.setMaximumSize(new java.awt.Dimension(2147483647, 200));
        pnlCorrRegistrados.setMinimumSize(new java.awt.Dimension(750, 200));
        pnlCorrRegistrados.setPreferredSize(new java.awt.Dimension(600, 200));
        pnlCorrRegistrados.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Corredores Registrados");
        jLabel1.setMaximumSize(new java.awt.Dimension(1000, 1000));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        pnlCorrRegistrados.add(jLabel1, gridBagConstraints);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setMinimumSize(new java.awt.Dimension(550, 150));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(550, 150));

        txtCorrRegistrados.setBackground(new java.awt.Color(204, 255, 204));
        txtCorrRegistrados.setColumns(20);
        txtCorrRegistrados.setForeground(new java.awt.Color(0, 0, 0));
        txtCorrRegistrados.setRows(7);
        txtCorrRegistrados.setTabSize(4);
        txtCorrRegistrados.setText("1 -\n2 -\n3 -\n4 -\n5 -");
        txtCorrRegistrados.setMinimumSize(new java.awt.Dimension(27, 150));
        txtCorrRegistrados.setPreferredSize(new java.awt.Dimension(232, 150));
        jScrollPane3.setViewportView(txtCorrRegistrados);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = -50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlCorrRegistrados.add(jScrollPane3, gridBagConstraints);

        getContentPane().add(pnlCorrRegistrados);

        pnlResultados.setBackground(new java.awt.Color(153, 255, 255));
        pnlResultados.setMinimumSize(new java.awt.Dimension(740, 200));
        pnlResultados.setPreferredSize(new java.awt.Dimension(600, 200));
        pnlResultados.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Resultados");
        jLabel3.setMaximumSize(new java.awt.Dimension(1000, 1000));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        pnlResultados.add(jLabel3, gridBagConstraints);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(550, 150));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(550, 150));

        txtCorrResultados.setBackground(new java.awt.Color(204, 255, 204));
        txtCorrResultados.setColumns(20);
        txtCorrResultados.setForeground(new java.awt.Color(0, 0, 0));
        txtCorrResultados.setRows(7);
        txtCorrResultados.setTabSize(4);
        txtCorrResultados.setText("1 -\n2 -\n3 -\n4 -\n5 -");
        txtCorrResultados.setMinimumSize(new java.awt.Dimension(27, 150));
        txtCorrResultados.setPreferredSize(new java.awt.Dimension(232, 150));
        jScrollPane2.setViewportView(txtCorrResultados);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = -50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        pnlResultados.add(jScrollPane2, gridBagConstraints);

        pnlCMD.setBackground(new java.awt.Color(153, 255, 255));
        pnlCMD.setMinimumSize(new java.awt.Dimension(140, 150));
        pnlCMD.setPreferredSize(new java.awt.Dimension(140, 150));
        pnlCMD.setLayout(new java.awt.GridBagLayout());

        btnTerminar.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        btnTerminar.setText("Terminar");
        btnTerminar.setMaximumSize(new java.awt.Dimension(120, 35));
        btnTerminar.setMinimumSize(new java.awt.Dimension(120, 35));
        btnTerminar.setPreferredSize(new java.awt.Dimension(120, 35));
        btnTerminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTerminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlCMD.add(btnTerminar, gridBagConstraints);

        btnReiniciar.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        btnReiniciar.setText("Reiniciar");
        btnReiniciar.setMaximumSize(new java.awt.Dimension(120, 35));
        btnReiniciar.setMinimumSize(new java.awt.Dimension(120, 35));
        btnReiniciar.setPreferredSize(new java.awt.Dimension(120, 35));
        btnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        pnlCMD.add(btnReiniciar, gridBagConstraints);

        btnIniciar.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        btnIniciar.setText("Iniciar");
        btnIniciar.setMaximumSize(new java.awt.Dimension(120, 35));
        btnIniciar.setMinimumSize(new java.awt.Dimension(120, 35));
        btnIniciar.setPreferredSize(new java.awt.Dimension(120, 35));
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        pnlCMD.add(btnIniciar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        pnlResultados.add(pnlCMD, gridBagConstraints);

        getContentPane().add(pnlResultados);

        setSize(new java.awt.Dimension(610, 530));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnTerminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTerminarActionPerformed
        actionSalir(this);
    }//GEN-LAST:event_btnTerminarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed

        if (contCorr >= 5) {
            JOptionPane.showMessageDialog(this, "Error, no es posible agragar mas Corredores");
            btnReiniciar.requestFocus();

            btnRegistrar.setEnabled(false);
            return;
        }

        // Validar
        String nombre = txtNombre.getText().trim();

        if (nombre.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Error, el nombre no puede estar vacio");
            txtNombre.requestFocus();
            return;
        }

        // Agregar el corredor al arreglo
        arrCorr[contCorr++] = new Runner(nombre);
        txtCorrRegistrados.setText(txtCorrRegistrados.getText() + "\n" + contCorr + " - " + nombre);
        txtCorrResultados.setText("");

        // limpiar campo
        txtNombre.setText("");
        txtNombre.requestFocus();

        if (contCorr >= 5) {
            // habilitar el boton
            btnIniciar.setEnabled(true);
        }

    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        if (contCorr != 5) {
            JOptionPane.showMessageDialog(this, "Error, deben de estar registrados 5 Corredores");
            txtNombre.requestFocus();
            return;
        }

        // inhabilitar el boton
        btnIniciar.setEnabled(false);

        txtCorrResultados.setText("");

        // Ejecutar el Thread
        for (int i = 0; i < 5; i++) {
            (new ThreadRunner(arrCorr[i], txtCorrResultados)).start();
        }

    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarActionPerformed

        Limpiar();

    }//GEN-LAST:event_btnReiniciarActionPerformed

    private void Limpiar() {

        // habilitar el boton
        btnRegistrar.setEnabled(true);

        // inhabilitar el boton
        btnIniciar.setEnabled(false);

        // limpiar el nombre
        txtNombre.setText("");

        // limpiar el area de corredores registrados
        txtCorrRegistrados.setText("");

        // limpiar el area de resultados
        txtCorrResultados.setText("");

        // limpiar el arreglo
        for (int i = 0; i < 5; i++) {
            arrCorr[i] = null;
        }

        contCorr = 0;
        contPos = 0;

        txtNombre.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnReiniciar;
    private javax.swing.JButton btnTerminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlCMD;
    private javax.swing.JPanel pnlCorrRegistrados;
    private javax.swing.JPanel pnlRegistro;
    private javax.swing.JPanel pnlResultados;
    private javax.swing.JTextArea txtCorrRegistrados;
    private javax.swing.JTextArea txtCorrResultados;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    public static boolean actionSalir(Window win) {

        win.setVisible(false);
        win.dispose();

        final Window parent = win.getOwner();
        if (parent != null) {
            parent.setVisible(true);
        } else {
            System.exit(0);
        }

        return true;
    }

}
