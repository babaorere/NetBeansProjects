/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectohotel;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 *
 * @author Esteban Quesada
 */
public class BitacoraImpresion extends javax.swing.JFrame {
    
    Bitacora bitacora;
    String userName;
    String userNameBuscado;
    /** Creates new form consultaImpresion */
    public BitacoraImpresion(Bitacora bitacora, String userNameBuscado, String userName) {
        initComponents();
        this.userNameBuscado=userNameBuscado;
        this.userName =userName;
        this.bitacora= bitacora; 
        consultarRegistro();
        
       
        
    }
    public BitacoraImpresion() {
        initComponents();
        this.userNameBuscado ="";
        this.userName ="";
        this.bitacora= new Bitacora(); 
        
    }
    
    private void consultarRegistro() {                                           
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        int encontrado = 0;
        int contador =0;
        
        

        try {
            //Apertura del fichero y creacion de BufferedReader

            archivo = new File("archivos/reservaciones.txt");
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);

            //Lectura del fichero
            String linea = "";
            // Se hace lectura por linea
            while ((linea = br.readLine()) != null) {
                //El tokenizer lo que hace es agarrar la linea y partirla en pedazos segun el caracter..En este casi la coma ( ,).
                //Guarda esos pedazos internamente en un arreglo y se va recorriendo al usar nextToken.
                StringTokenizer defaultTokenizer = new StringTokenizer(linea,"*");
                // Se entiende que son 3 token lo que se graba en el archivo por linea
                // Si no son 3 token se ignora esa linea porque posiblemente estaria corrupta. 
                if (defaultTokenizer.countTokens() == 7) {
                    String userName= defaultTokenizer.nextToken();
                    String nombre= defaultTokenizer.nextToken();
                    String nombreCliente = defaultTokenizer.nextToken();
                    String codigoCliente = defaultTokenizer.nextToken();
                    String fechaReservacion = defaultTokenizer.nextToken();
                    String codigoHabitacion = defaultTokenizer.nextToken();
                    String cantidadPersonas = defaultTokenizer.nextToken();
                
                    if (this.userNameBuscado.equalsIgnoreCase(userName)) {
                        tabla.setValueAt(nombre, contador, 0 );
                        tabla.setValueAt(nombreCliente, contador, 1 );
                        tabla.setValueAt(codigoCliente, contador, 2 );
                        tabla.setValueAt(fechaReservacion, contador, 3 );

                        contador++;
                        encontrado = 1;
                    }
                 
                }
               
                
                
            }
            
            if(encontrado != 1)
            {
                JOptionPane.showMessageDialog(null, "Ninguna reservaci√≥n fue encontrada");
            }
            

        } catch (Exception exx) {
            //exx.printStackTrace();
            JOptionPane.showMessageDialog(null, "No existente");
        } finally {
            if (null != fr) {
                try {
                    fr.close();
                } catch (IOException ex) {
                    // Logger.getLogger(ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }                              
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Regresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Datos de Bitacora");

        Regresar.setText("Regresar ");
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Usuario", "Nombre Cliente", "Codigo Cliente", "Fecha Reservacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(Regresar)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(Regresar)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarActionPerformed
            bitacora.setVisible(true);
            this.setVisible(false);
            this.dispose();
    }//GEN-LAST:event_RegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BitacoraImpresion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BitacoraImpresion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BitacoraImpresion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BitacoraImpresion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BitacoraImpresion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Regresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
